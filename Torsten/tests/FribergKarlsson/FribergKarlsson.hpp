// Code generated by Stan version 2.17.1

#include <stan/model/model_header.hpp>

namespace FribergKarlsson_model_namespace {

using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;

static int current_statement_begin__;

stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "../Torsten/tests/FribergKarlsson/FribergKarlsson.stan");
    reader.add_event(168, 168, "end", "../Torsten/tests/FribergKarlsson/FribergKarlsson.stan");
    return reader;
}

template <typename T0__, typename T1__, typename T2__, typename T3__, typename T4__>
std::vector<typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__>::type>::type>
FK_ODE(const T0__& t,
           const std::vector<T1__>& y,
           const std::vector<T2__>& y_pk,
           const std::vector<T3__>& theta,
           const std::vector<T4__>& rdummy,
           const std::vector<int>& idummy, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__>::type>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 9;
        local_scalar_t__ VC;
        (void) VC;  // dummy to suppress unused var warning

        stan::math::initialize(VC, DUMMY_VAR__);
        stan::math::fill(VC,DUMMY_VAR__);
        stan::math::assign(VC,get_base1(theta,3,"theta",1));
        current_statement_begin__ = 12;
        local_scalar_t__ mtt;
        (void) mtt;  // dummy to suppress unused var warning

        stan::math::initialize(mtt, DUMMY_VAR__);
        stan::math::fill(mtt,DUMMY_VAR__);
        stan::math::assign(mtt,get_base1(theta,6,"theta",1));
        current_statement_begin__ = 13;
        local_scalar_t__ circ0;
        (void) circ0;  // dummy to suppress unused var warning

        stan::math::initialize(circ0, DUMMY_VAR__);
        stan::math::fill(circ0,DUMMY_VAR__);
        stan::math::assign(circ0,get_base1(theta,7,"theta",1));
        current_statement_begin__ = 14;
        local_scalar_t__ alpha;
        (void) alpha;  // dummy to suppress unused var warning

        stan::math::initialize(alpha, DUMMY_VAR__);
        stan::math::fill(alpha,DUMMY_VAR__);
        stan::math::assign(alpha,get_base1(theta,8,"theta",1));
        current_statement_begin__ = 15;
        local_scalar_t__ gamma;
        (void) gamma;  // dummy to suppress unused var warning

        stan::math::initialize(gamma, DUMMY_VAR__);
        stan::math::fill(gamma,DUMMY_VAR__);
        stan::math::assign(gamma,get_base1(theta,9,"theta",1));
        current_statement_begin__ = 16;
        local_scalar_t__ ktr;
        (void) ktr;  // dummy to suppress unused var warning

        stan::math::initialize(ktr, DUMMY_VAR__);
        stan::math::fill(ktr,DUMMY_VAR__);
        stan::math::assign(ktr,(4.0 / mtt));
        current_statement_begin__ = 17;
        local_scalar_t__ prol;
        (void) prol;  // dummy to suppress unused var warning

        stan::math::initialize(prol, DUMMY_VAR__);
        stan::math::fill(prol,DUMMY_VAR__);
        stan::math::assign(prol,(get_base1(y,1,"y",1) + circ0));
        current_statement_begin__ = 18;
        local_scalar_t__ transit1;
        (void) transit1;  // dummy to suppress unused var warning

        stan::math::initialize(transit1, DUMMY_VAR__);
        stan::math::fill(transit1,DUMMY_VAR__);
        stan::math::assign(transit1,(get_base1(y,2,"y",1) + circ0));
        current_statement_begin__ = 19;
        local_scalar_t__ transit2;
        (void) transit2;  // dummy to suppress unused var warning

        stan::math::initialize(transit2, DUMMY_VAR__);
        stan::math::fill(transit2,DUMMY_VAR__);
        stan::math::assign(transit2,(get_base1(y,3,"y",1) + circ0));
        current_statement_begin__ = 20;
        local_scalar_t__ transit3;
        (void) transit3;  // dummy to suppress unused var warning

        stan::math::initialize(transit3, DUMMY_VAR__);
        stan::math::fill(transit3,DUMMY_VAR__);
        stan::math::assign(transit3,(get_base1(y,4,"y",1) + circ0));
        current_statement_begin__ = 21;
        local_scalar_t__ circ;
        (void) circ;  // dummy to suppress unused var warning

        stan::math::initialize(circ, DUMMY_VAR__);
        stan::math::fill(circ,DUMMY_VAR__);
        stan::math::assign(circ,stan::math::fmax(stan::math::machine_precision(),(get_base1(y,5,"y",1) + circ0)));
        current_statement_begin__ = 22;
        local_scalar_t__ conc;
        (void) conc;  // dummy to suppress unused var warning

        stan::math::initialize(conc, DUMMY_VAR__);
        stan::math::fill(conc,DUMMY_VAR__);
        stan::math::assign(conc,(get_base1(y_pk,2,"y_pk",1) / VC));
        current_statement_begin__ = 23;
        local_scalar_t__ EDrug;
        (void) EDrug;  // dummy to suppress unused var warning

        stan::math::initialize(EDrug, DUMMY_VAR__);
        stan::math::fill(EDrug,DUMMY_VAR__);
        stan::math::assign(EDrug,(alpha * conc));
        current_statement_begin__ = 25;
        validate_non_negative_index("dydt", "5", 5);
        vector<local_scalar_t__> dydt(5);
        stan::math::initialize(dydt, DUMMY_VAR__);
        stan::math::fill(dydt,DUMMY_VAR__);


        current_statement_begin__ = 27;
        stan::math::assign(get_base1_lhs(dydt,1,"dydt",1), ((ktr * prol) * (((1 - EDrug) * pow((circ0 / circ),gamma)) - 1)));
        current_statement_begin__ = 28;
        stan::math::assign(get_base1_lhs(dydt,2,"dydt",1), (ktr * (prol - transit1)));
        current_statement_begin__ = 29;
        stan::math::assign(get_base1_lhs(dydt,3,"dydt",1), (ktr * (transit1 - transit2)));
        current_statement_begin__ = 30;
        stan::math::assign(get_base1_lhs(dydt,4,"dydt",1), (ktr * (transit2 - transit3)));
        current_statement_begin__ = 31;
        stan::math::assign(get_base1_lhs(dydt,5,"dydt",1), (ktr * (transit3 - circ)));
        current_statement_begin__ = 33;
        return stan::math::promote_scalar<fun_return_scalar_t__>(dydt);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct FK_ODE_functor__ {
    template <typename T0__, typename T1__, typename T2__, typename T3__, typename T4__>
        std::vector<typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__>::type>::type>
    operator()(const T0__& t,
           const std::vector<T1__>& y,
           const std::vector<T2__>& y_pk,
           const std::vector<T3__>& theta,
           const std::vector<T4__>& rdummy,
           const std::vector<int>& idummy, std::ostream* pstream__) const {
        return FK_ODE(t, y, y_pk, theta, rdummy, idummy, pstream__);
    }
};

class FribergKarlsson_model : public prob_grad {
private:
    int nt;
    int nObsPK;
    int nObsPD;
    vector<int> iObsPK;
    vector<int> iObsPD;
    vector<double> amt;
    vector<int> cmt;
    vector<int> evid;
    vector<double> time;
    vector<double> ii;
    vector<int> addl;
    vector<int> ss;
    vector<double> rate;
    vector_d cObs;
    vector_d neutObs;
    double circ0Prior;
    double circ0PriorCV;
    double mttPrior;
    double mttPriorCV;
    double gammaPrior;
    double gammaPriorCV;
    double alphaPrior;
    double alphaPriorCV;
    int nOde;
    vector_d logCObs;
    vector_d logNeutObs;
    int nTheta;
    int nIIV;
    int n;
    double rtol;
    double atol;
    int max_step;
public:
    FribergKarlsson_model(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, 0, pstream__);
    }

    FribergKarlsson_model(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, random_seed__, pstream__);
    }

    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        typedef double local_scalar_t__;

        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning

        current_statement_begin__ = -1;

        static const char* function__ = "FribergKarlsson_model_namespace::FribergKarlsson_model";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        // initialize member variables
        try {
            current_statement_begin__ = 38;
            context__.validate_dims("data initialization", "nt", "int", context__.to_vec());
            nt = int(0);
            vals_i__ = context__.vals_i("nt");
            pos__ = 0;
            nt = vals_i__[pos__++];
            current_statement_begin__ = 39;
            context__.validate_dims("data initialization", "nObsPK", "int", context__.to_vec());
            nObsPK = int(0);
            vals_i__ = context__.vals_i("nObsPK");
            pos__ = 0;
            nObsPK = vals_i__[pos__++];
            current_statement_begin__ = 40;
            context__.validate_dims("data initialization", "nObsPD", "int", context__.to_vec());
            nObsPD = int(0);
            vals_i__ = context__.vals_i("nObsPD");
            pos__ = 0;
            nObsPD = vals_i__[pos__++];
            current_statement_begin__ = 41;
            validate_non_negative_index("iObsPK", "nObsPK", nObsPK);
            context__.validate_dims("data initialization", "iObsPK", "int", context__.to_vec(nObsPK));
            validate_non_negative_index("iObsPK", "nObsPK", nObsPK);
            iObsPK = std::vector<int>(nObsPK,int(0));
            vals_i__ = context__.vals_i("iObsPK");
            pos__ = 0;
            size_t iObsPK_limit_0__ = nObsPK;
            for (size_t i_0__ = 0; i_0__ < iObsPK_limit_0__; ++i_0__) {
                iObsPK[i_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 42;
            validate_non_negative_index("iObsPD", "nObsPD", nObsPD);
            context__.validate_dims("data initialization", "iObsPD", "int", context__.to_vec(nObsPD));
            validate_non_negative_index("iObsPD", "nObsPD", nObsPD);
            iObsPD = std::vector<int>(nObsPD,int(0));
            vals_i__ = context__.vals_i("iObsPD");
            pos__ = 0;
            size_t iObsPD_limit_0__ = nObsPD;
            for (size_t i_0__ = 0; i_0__ < iObsPD_limit_0__; ++i_0__) {
                iObsPD[i_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 43;
            validate_non_negative_index("amt", "nt", nt);
            context__.validate_dims("data initialization", "amt", "double", context__.to_vec(nt));
            validate_non_negative_index("amt", "nt", nt);
            amt = std::vector<double>(nt,double(0));
            vals_r__ = context__.vals_r("amt");
            pos__ = 0;
            size_t amt_limit_0__ = nt;
            for (size_t i_0__ = 0; i_0__ < amt_limit_0__; ++i_0__) {
                amt[i_0__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 44;
            validate_non_negative_index("cmt", "nt", nt);
            context__.validate_dims("data initialization", "cmt", "int", context__.to_vec(nt));
            validate_non_negative_index("cmt", "nt", nt);
            cmt = std::vector<int>(nt,int(0));
            vals_i__ = context__.vals_i("cmt");
            pos__ = 0;
            size_t cmt_limit_0__ = nt;
            for (size_t i_0__ = 0; i_0__ < cmt_limit_0__; ++i_0__) {
                cmt[i_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 45;
            validate_non_negative_index("evid", "nt", nt);
            context__.validate_dims("data initialization", "evid", "int", context__.to_vec(nt));
            validate_non_negative_index("evid", "nt", nt);
            evid = std::vector<int>(nt,int(0));
            vals_i__ = context__.vals_i("evid");
            pos__ = 0;
            size_t evid_limit_0__ = nt;
            for (size_t i_0__ = 0; i_0__ < evid_limit_0__; ++i_0__) {
                evid[i_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 46;
            validate_non_negative_index("time", "nt", nt);
            context__.validate_dims("data initialization", "time", "double", context__.to_vec(nt));
            validate_non_negative_index("time", "nt", nt);
            time = std::vector<double>(nt,double(0));
            vals_r__ = context__.vals_r("time");
            pos__ = 0;
            size_t time_limit_0__ = nt;
            for (size_t i_0__ = 0; i_0__ < time_limit_0__; ++i_0__) {
                time[i_0__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 47;
            validate_non_negative_index("ii", "nt", nt);
            context__.validate_dims("data initialization", "ii", "double", context__.to_vec(nt));
            validate_non_negative_index("ii", "nt", nt);
            ii = std::vector<double>(nt,double(0));
            vals_r__ = context__.vals_r("ii");
            pos__ = 0;
            size_t ii_limit_0__ = nt;
            for (size_t i_0__ = 0; i_0__ < ii_limit_0__; ++i_0__) {
                ii[i_0__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 48;
            validate_non_negative_index("addl", "nt", nt);
            context__.validate_dims("data initialization", "addl", "int", context__.to_vec(nt));
            validate_non_negative_index("addl", "nt", nt);
            addl = std::vector<int>(nt,int(0));
            vals_i__ = context__.vals_i("addl");
            pos__ = 0;
            size_t addl_limit_0__ = nt;
            for (size_t i_0__ = 0; i_0__ < addl_limit_0__; ++i_0__) {
                addl[i_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 49;
            validate_non_negative_index("ss", "nt", nt);
            context__.validate_dims("data initialization", "ss", "int", context__.to_vec(nt));
            validate_non_negative_index("ss", "nt", nt);
            ss = std::vector<int>(nt,int(0));
            vals_i__ = context__.vals_i("ss");
            pos__ = 0;
            size_t ss_limit_0__ = nt;
            for (size_t i_0__ = 0; i_0__ < ss_limit_0__; ++i_0__) {
                ss[i_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 50;
            validate_non_negative_index("rate", "nt", nt);
            context__.validate_dims("data initialization", "rate", "double", context__.to_vec(nt));
            validate_non_negative_index("rate", "nt", nt);
            rate = std::vector<double>(nt,double(0));
            vals_r__ = context__.vals_r("rate");
            pos__ = 0;
            size_t rate_limit_0__ = nt;
            for (size_t i_0__ = 0; i_0__ < rate_limit_0__; ++i_0__) {
                rate[i_0__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 51;
            validate_non_negative_index("cObs", "nObsPK", nObsPK);
            context__.validate_dims("data initialization", "cObs", "vector_d", context__.to_vec(nObsPK));
            validate_non_negative_index("cObs", "nObsPK", nObsPK);
            cObs = vector_d(static_cast<Eigen::VectorXd::Index>(nObsPK));
            vals_r__ = context__.vals_r("cObs");
            pos__ = 0;
            size_t cObs_i_vec_lim__ = nObsPK;
            for (size_t i_vec__ = 0; i_vec__ < cObs_i_vec_lim__; ++i_vec__) {
                cObs[i_vec__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 52;
            validate_non_negative_index("neutObs", "nObsPD", nObsPD);
            context__.validate_dims("data initialization", "neutObs", "vector_d", context__.to_vec(nObsPD));
            validate_non_negative_index("neutObs", "nObsPD", nObsPD);
            neutObs = vector_d(static_cast<Eigen::VectorXd::Index>(nObsPD));
            vals_r__ = context__.vals_r("neutObs");
            pos__ = 0;
            size_t neutObs_i_vec_lim__ = nObsPD;
            for (size_t i_vec__ = 0; i_vec__ < neutObs_i_vec_lim__; ++i_vec__) {
                neutObs[i_vec__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 54;
            context__.validate_dims("data initialization", "circ0Prior", "double", context__.to_vec());
            circ0Prior = double(0);
            vals_r__ = context__.vals_r("circ0Prior");
            pos__ = 0;
            circ0Prior = vals_r__[pos__++];
            current_statement_begin__ = 55;
            context__.validate_dims("data initialization", "circ0PriorCV", "double", context__.to_vec());
            circ0PriorCV = double(0);
            vals_r__ = context__.vals_r("circ0PriorCV");
            pos__ = 0;
            circ0PriorCV = vals_r__[pos__++];
            current_statement_begin__ = 56;
            context__.validate_dims("data initialization", "mttPrior", "double", context__.to_vec());
            mttPrior = double(0);
            vals_r__ = context__.vals_r("mttPrior");
            pos__ = 0;
            mttPrior = vals_r__[pos__++];
            current_statement_begin__ = 57;
            context__.validate_dims("data initialization", "mttPriorCV", "double", context__.to_vec());
            mttPriorCV = double(0);
            vals_r__ = context__.vals_r("mttPriorCV");
            pos__ = 0;
            mttPriorCV = vals_r__[pos__++];
            current_statement_begin__ = 58;
            context__.validate_dims("data initialization", "gammaPrior", "double", context__.to_vec());
            gammaPrior = double(0);
            vals_r__ = context__.vals_r("gammaPrior");
            pos__ = 0;
            gammaPrior = vals_r__[pos__++];
            current_statement_begin__ = 59;
            context__.validate_dims("data initialization", "gammaPriorCV", "double", context__.to_vec());
            gammaPriorCV = double(0);
            vals_r__ = context__.vals_r("gammaPriorCV");
            pos__ = 0;
            gammaPriorCV = vals_r__[pos__++];
            current_statement_begin__ = 60;
            context__.validate_dims("data initialization", "alphaPrior", "double", context__.to_vec());
            alphaPrior = double(0);
            vals_r__ = context__.vals_r("alphaPrior");
            pos__ = 0;
            alphaPrior = vals_r__[pos__++];
            current_statement_begin__ = 61;
            context__.validate_dims("data initialization", "alphaPriorCV", "double", context__.to_vec());
            alphaPriorCV = double(0);
            vals_r__ = context__.vals_r("alphaPriorCV");
            pos__ = 0;
            alphaPriorCV = vals_r__[pos__++];

            // validate, data variables
            current_statement_begin__ = 38;
            check_greater_or_equal(function__,"nt",nt,1);
            current_statement_begin__ = 39;
            check_greater_or_equal(function__,"nObsPK",nObsPK,1);
            current_statement_begin__ = 40;
            check_greater_or_equal(function__,"nObsPD",nObsPD,1);
            current_statement_begin__ = 41;
            for (int k0__ = 0; k0__ < nObsPK; ++k0__) {
                check_greater_or_equal(function__,"iObsPK[k0__]",iObsPK[k0__],1);
            }
            current_statement_begin__ = 42;
            for (int k0__ = 0; k0__ < nObsPD; ++k0__) {
                check_greater_or_equal(function__,"iObsPD[k0__]",iObsPD[k0__],1);
            }
            current_statement_begin__ = 43;
            for (int k0__ = 0; k0__ < nt; ++k0__) {
                check_greater_or_equal(function__,"amt[k0__]",amt[k0__],0);
            }
            current_statement_begin__ = 44;
            for (int k0__ = 0; k0__ < nt; ++k0__) {
                check_greater_or_equal(function__,"cmt[k0__]",cmt[k0__],1);
            }
            current_statement_begin__ = 45;
            for (int k0__ = 0; k0__ < nt; ++k0__) {
                check_greater_or_equal(function__,"evid[k0__]",evid[k0__],0);
            }
            current_statement_begin__ = 46;
            for (int k0__ = 0; k0__ < nt; ++k0__) {
                check_greater_or_equal(function__,"time[k0__]",time[k0__],0);
            }
            current_statement_begin__ = 47;
            for (int k0__ = 0; k0__ < nt; ++k0__) {
                check_greater_or_equal(function__,"ii[k0__]",ii[k0__],0);
            }
            current_statement_begin__ = 48;
            for (int k0__ = 0; k0__ < nt; ++k0__) {
                check_greater_or_equal(function__,"addl[k0__]",addl[k0__],0);
            }
            current_statement_begin__ = 49;
            for (int k0__ = 0; k0__ < nt; ++k0__) {
                check_greater_or_equal(function__,"ss[k0__]",ss[k0__],0);
            }
            current_statement_begin__ = 50;
            current_statement_begin__ = 51;
            check_greater_or_equal(function__,"cObs",cObs,0);
            current_statement_begin__ = 52;
            check_greater_or_equal(function__,"neutObs",neutObs,0);
            current_statement_begin__ = 54;
            check_greater_or_equal(function__,"circ0Prior",circ0Prior,0);
            current_statement_begin__ = 55;
            check_greater_or_equal(function__,"circ0PriorCV",circ0PriorCV,0);
            current_statement_begin__ = 56;
            check_greater_or_equal(function__,"mttPrior",mttPrior,0);
            current_statement_begin__ = 57;
            check_greater_or_equal(function__,"mttPriorCV",mttPriorCV,0);
            current_statement_begin__ = 58;
            check_greater_or_equal(function__,"gammaPrior",gammaPrior,0);
            current_statement_begin__ = 59;
            check_greater_or_equal(function__,"gammaPriorCV",gammaPriorCV,0);
            current_statement_begin__ = 60;
            check_greater_or_equal(function__,"alphaPrior",alphaPrior,0);
            current_statement_begin__ = 61;
            check_greater_or_equal(function__,"alphaPriorCV",alphaPriorCV,0);
            // initialize data variables
            current_statement_begin__ = 65;
            nOde = int(0);
            stan::math::fill(nOde, std::numeric_limits<int>::min());
            stan::math::assign(nOde,5);
            current_statement_begin__ = 66;
            validate_non_negative_index("logCObs", "nObsPK", nObsPK);
            logCObs = vector_d(static_cast<Eigen::VectorXd::Index>(nObsPK));
            stan::math::fill(logCObs,DUMMY_VAR__);
            current_statement_begin__ = 67;
            validate_non_negative_index("logNeutObs", "nObsPD", nObsPD);
            logNeutObs = vector_d(static_cast<Eigen::VectorXd::Index>(nObsPD));
            stan::math::fill(logNeutObs,DUMMY_VAR__);
            current_statement_begin__ = 71;
            nTheta = int(0);
            stan::math::fill(nTheta, std::numeric_limits<int>::min());
            current_statement_begin__ = 72;
            nIIV = int(0);
            stan::math::fill(nIIV, std::numeric_limits<int>::min());
            current_statement_begin__ = 74;
            n = int(0);
            stan::math::fill(n, std::numeric_limits<int>::min());
            current_statement_begin__ = 75;
            rtol = double(0);
            stan::math::fill(rtol,DUMMY_VAR__);
            current_statement_begin__ = 76;
            atol = double(0);
            stan::math::fill(atol,DUMMY_VAR__);
            current_statement_begin__ = 77;
            max_step = int(0);
            stan::math::fill(max_step, std::numeric_limits<int>::min());

            current_statement_begin__ = 79;
            stan::math::assign(n, 8);
            current_statement_begin__ = 80;
            stan::math::assign(rtol, 1e-08);
            current_statement_begin__ = 81;
            stan::math::assign(atol, 1e-08);
            current_statement_begin__ = 82;
            stan::math::assign(max_step, 100000);
            current_statement_begin__ = 84;
            stan::math::assign(logCObs, stan::math::log(cObs));
            current_statement_begin__ = 85;
            stan::math::assign(logNeutObs, stan::math::log(neutObs));
            current_statement_begin__ = 87;
            stan::math::assign(nIIV, 7);
            current_statement_begin__ = 88;
            stan::math::assign(nTheta, 9);

            // validate transformed data
            current_statement_begin__ = 65;
            current_statement_begin__ = 66;
            current_statement_begin__ = 67;
            current_statement_begin__ = 71;
            current_statement_begin__ = 72;
            current_statement_begin__ = 74;
            current_statement_begin__ = 75;
            current_statement_begin__ = 76;
            current_statement_begin__ = 77;

            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
            current_statement_begin__ = 93;
            ++num_params_r__;
            current_statement_begin__ = 94;
            ++num_params_r__;
            current_statement_begin__ = 95;
            ++num_params_r__;
            current_statement_begin__ = 96;
            ++num_params_r__;
            current_statement_begin__ = 97;
            ++num_params_r__;
            current_statement_begin__ = 98;
            ++num_params_r__;
            current_statement_begin__ = 99;
            ++num_params_r__;
            current_statement_begin__ = 100;
            ++num_params_r__;
            current_statement_begin__ = 101;
            ++num_params_r__;
            current_statement_begin__ = 102;
            ++num_params_r__;
            current_statement_begin__ = 103;
            ++num_params_r__;
            current_statement_begin__ = 106;
            validate_non_negative_index("L", "nIIV", nIIV);
            num_params_r__ += ((nIIV * (nIIV - 1)) / 2);
            current_statement_begin__ = 107;
            validate_non_negative_index("omega", "nIIV", nIIV);
            num_params_r__ += nIIV;
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }

    ~FribergKarlsson_model() { }


    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        stan::io::writer<double> writer__(params_r__,params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;

        if (!(context__.contains_r("CL")))
            throw std::runtime_error("variable CL missing");
        vals_r__ = context__.vals_r("CL");
        pos__ = 0U;
        context__.validate_dims("initialization", "CL", "double", context__.to_vec());
        double CL(0);
        CL = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0,CL);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable CL: ") + e.what());
        }

        if (!(context__.contains_r("Q")))
            throw std::runtime_error("variable Q missing");
        vals_r__ = context__.vals_r("Q");
        pos__ = 0U;
        context__.validate_dims("initialization", "Q", "double", context__.to_vec());
        double Q(0);
        Q = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0,Q);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable Q: ") + e.what());
        }

        if (!(context__.contains_r("VC")))
            throw std::runtime_error("variable VC missing");
        vals_r__ = context__.vals_r("VC");
        pos__ = 0U;
        context__.validate_dims("initialization", "VC", "double", context__.to_vec());
        double VC(0);
        VC = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0,VC);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable VC: ") + e.what());
        }

        if (!(context__.contains_r("VP")))
            throw std::runtime_error("variable VP missing");
        vals_r__ = context__.vals_r("VP");
        pos__ = 0U;
        context__.validate_dims("initialization", "VP", "double", context__.to_vec());
        double VP(0);
        VP = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0,VP);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable VP: ") + e.what());
        }

        if (!(context__.contains_r("ka")))
            throw std::runtime_error("variable ka missing");
        vals_r__ = context__.vals_r("ka");
        pos__ = 0U;
        context__.validate_dims("initialization", "ka", "double", context__.to_vec());
        double ka(0);
        ka = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0,ka);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable ka: ") + e.what());
        }

        if (!(context__.contains_r("mtt")))
            throw std::runtime_error("variable mtt missing");
        vals_r__ = context__.vals_r("mtt");
        pos__ = 0U;
        context__.validate_dims("initialization", "mtt", "double", context__.to_vec());
        double mtt(0);
        mtt = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0,mtt);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable mtt: ") + e.what());
        }

        if (!(context__.contains_r("circ0")))
            throw std::runtime_error("variable circ0 missing");
        vals_r__ = context__.vals_r("circ0");
        pos__ = 0U;
        context__.validate_dims("initialization", "circ0", "double", context__.to_vec());
        double circ0(0);
        circ0 = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0,circ0);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable circ0: ") + e.what());
        }

        if (!(context__.contains_r("alpha")))
            throw std::runtime_error("variable alpha missing");
        vals_r__ = context__.vals_r("alpha");
        pos__ = 0U;
        context__.validate_dims("initialization", "alpha", "double", context__.to_vec());
        double alpha(0);
        alpha = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0,alpha);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable alpha: ") + e.what());
        }

        if (!(context__.contains_r("gamma")))
            throw std::runtime_error("variable gamma missing");
        vals_r__ = context__.vals_r("gamma");
        pos__ = 0U;
        context__.validate_dims("initialization", "gamma", "double", context__.to_vec());
        double gamma(0);
        gamma = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0,gamma);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable gamma: ") + e.what());
        }

        if (!(context__.contains_r("sigma")))
            throw std::runtime_error("variable sigma missing");
        vals_r__ = context__.vals_r("sigma");
        pos__ = 0U;
        context__.validate_dims("initialization", "sigma", "double", context__.to_vec());
        double sigma(0);
        sigma = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0,sigma);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable sigma: ") + e.what());
        }

        if (!(context__.contains_r("sigmaNeut")))
            throw std::runtime_error("variable sigmaNeut missing");
        vals_r__ = context__.vals_r("sigmaNeut");
        pos__ = 0U;
        context__.validate_dims("initialization", "sigmaNeut", "double", context__.to_vec());
        double sigmaNeut(0);
        sigmaNeut = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0,sigmaNeut);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable sigmaNeut: ") + e.what());
        }

        if (!(context__.contains_r("L")))
            throw std::runtime_error("variable L missing");
        vals_r__ = context__.vals_r("L");
        pos__ = 0U;
        validate_non_negative_index("L", "nIIV", nIIV);
        validate_non_negative_index("L", "nIIV", nIIV);
        context__.validate_dims("initialization", "L", "matrix_d", context__.to_vec(nIIV,nIIV));
        matrix_d L(static_cast<Eigen::VectorXd::Index>(nIIV),static_cast<Eigen::VectorXd::Index>(nIIV));
        for (int j2__ = 0U; j2__ < nIIV; ++j2__)
            for (int j1__ = 0U; j1__ < nIIV; ++j1__)
                L(j1__,j2__) = vals_r__[pos__++];
        try {
            writer__.cholesky_corr_unconstrain(L);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable L: ") + e.what());
        }

        if (!(context__.contains_r("omega")))
            throw std::runtime_error("variable omega missing");
        vals_r__ = context__.vals_r("omega");
        pos__ = 0U;
        validate_non_negative_index("omega", "nIIV", nIIV);
        context__.validate_dims("initialization", "omega", "vector_d", context__.to_vec(nIIV));
        vector_d omega(static_cast<Eigen::VectorXd::Index>(nIIV));
        for (int j1__ = 0U; j1__ < nIIV; ++j1__)
            omega(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_lb_unconstrain(0,omega);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable omega: ") + e.what());
        }

        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }

    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }


    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(vector<T__>& params_r__,
                 vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {

        typedef T__ local_scalar_t__;

        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;

        try {
            // model parameters
            stan::io::reader<local_scalar_t__> in__(params_r__,params_i__);

            local_scalar_t__ CL;
            (void) CL;  // dummy to suppress unused var warning
            if (jacobian__)
                CL = in__.scalar_lb_constrain(0,lp__);
            else
                CL = in__.scalar_lb_constrain(0);

            local_scalar_t__ Q;
            (void) Q;  // dummy to suppress unused var warning
            if (jacobian__)
                Q = in__.scalar_lb_constrain(0,lp__);
            else
                Q = in__.scalar_lb_constrain(0);

            local_scalar_t__ VC;
            (void) VC;  // dummy to suppress unused var warning
            if (jacobian__)
                VC = in__.scalar_lb_constrain(0,lp__);
            else
                VC = in__.scalar_lb_constrain(0);

            local_scalar_t__ VP;
            (void) VP;  // dummy to suppress unused var warning
            if (jacobian__)
                VP = in__.scalar_lb_constrain(0,lp__);
            else
                VP = in__.scalar_lb_constrain(0);

            local_scalar_t__ ka;
            (void) ka;  // dummy to suppress unused var warning
            if (jacobian__)
                ka = in__.scalar_lb_constrain(0,lp__);
            else
                ka = in__.scalar_lb_constrain(0);

            local_scalar_t__ mtt;
            (void) mtt;  // dummy to suppress unused var warning
            if (jacobian__)
                mtt = in__.scalar_lb_constrain(0,lp__);
            else
                mtt = in__.scalar_lb_constrain(0);

            local_scalar_t__ circ0;
            (void) circ0;  // dummy to suppress unused var warning
            if (jacobian__)
                circ0 = in__.scalar_lb_constrain(0,lp__);
            else
                circ0 = in__.scalar_lb_constrain(0);

            local_scalar_t__ alpha;
            (void) alpha;  // dummy to suppress unused var warning
            if (jacobian__)
                alpha = in__.scalar_lb_constrain(0,lp__);
            else
                alpha = in__.scalar_lb_constrain(0);

            local_scalar_t__ gamma;
            (void) gamma;  // dummy to suppress unused var warning
            if (jacobian__)
                gamma = in__.scalar_lb_constrain(0,lp__);
            else
                gamma = in__.scalar_lb_constrain(0);

            local_scalar_t__ sigma;
            (void) sigma;  // dummy to suppress unused var warning
            if (jacobian__)
                sigma = in__.scalar_lb_constrain(0,lp__);
            else
                sigma = in__.scalar_lb_constrain(0);

            local_scalar_t__ sigmaNeut;
            (void) sigmaNeut;  // dummy to suppress unused var warning
            if (jacobian__)
                sigmaNeut = in__.scalar_lb_constrain(0,lp__);
            else
                sigmaNeut = in__.scalar_lb_constrain(0);

            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,Eigen::Dynamic>  L;
            (void) L;  // dummy to suppress unused var warning
            if (jacobian__)
                L = in__.cholesky_corr_constrain(nIIV,lp__);
            else
                L = in__.cholesky_corr_constrain(nIIV);

            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  omega;
            (void) omega;  // dummy to suppress unused var warning
            if (jacobian__)
                omega = in__.vector_lb_constrain(0,nIIV,lp__);
            else
                omega = in__.vector_lb_constrain(0,nIIV);


            // transformed parameters
            current_statement_begin__ = 111;
            validate_non_negative_index("cHat", "nt", nt);
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  cHat(static_cast<Eigen::VectorXd::Index>(nt));
            (void) cHat;  // dummy to suppress unused var warning

            stan::math::initialize(cHat, DUMMY_VAR__);
            stan::math::fill(cHat,DUMMY_VAR__);
            current_statement_begin__ = 112;
            validate_non_negative_index("cHatObs", "nObsPK", nObsPK);
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  cHatObs(static_cast<Eigen::VectorXd::Index>(nObsPK));
            (void) cHatObs;  // dummy to suppress unused var warning

            stan::math::initialize(cHatObs, DUMMY_VAR__);
            stan::math::fill(cHatObs,DUMMY_VAR__);
            current_statement_begin__ = 113;
            validate_non_negative_index("neutHat", "nt", nt);
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  neutHat(static_cast<Eigen::VectorXd::Index>(nt));
            (void) neutHat;  // dummy to suppress unused var warning

            stan::math::initialize(neutHat, DUMMY_VAR__);
            stan::math::fill(neutHat,DUMMY_VAR__);
            current_statement_begin__ = 114;
            validate_non_negative_index("neutHatObs", "nObsPD", nObsPD);
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  neutHatObs(static_cast<Eigen::VectorXd::Index>(nObsPD));
            (void) neutHatObs;  // dummy to suppress unused var warning

            stan::math::initialize(neutHatObs, DUMMY_VAR__);
            stan::math::fill(neutHatObs,DUMMY_VAR__);
            current_statement_begin__ = 115;
            validate_non_negative_index("theta", "nTheta", nTheta);
            vector<local_scalar_t__> theta(nTheta);
            stan::math::initialize(theta, DUMMY_VAR__);
            stan::math::fill(theta,DUMMY_VAR__);
            current_statement_begin__ = 116;
            validate_non_negative_index("x", "nt", nt);
            validate_non_negative_index("x", "(nOde + 3)", (nOde + 3));
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,Eigen::Dynamic>  x(static_cast<Eigen::VectorXd::Index>(nt),static_cast<Eigen::VectorXd::Index>((nOde + 3)));
            (void) x;  // dummy to suppress unused var warning

            stan::math::initialize(x, DUMMY_VAR__);
            stan::math::fill(x,DUMMY_VAR__);
            current_statement_begin__ = 117;
            validate_non_negative_index("biovar", "nTheta", nTheta);
            vector<local_scalar_t__> biovar(nTheta);
            stan::math::initialize(biovar, DUMMY_VAR__);
            stan::math::fill(biovar,DUMMY_VAR__);
            current_statement_begin__ = 118;
            validate_non_negative_index("tlag", "nTheta", nTheta);
            vector<local_scalar_t__> tlag(nTheta);
            stan::math::initialize(tlag, DUMMY_VAR__);
            stan::math::fill(tlag,DUMMY_VAR__);


            current_statement_begin__ = 120;
            for (int i = 1; i <= nTheta; ++i) {

                current_statement_begin__ = 121;
                stan::math::assign(get_base1_lhs(biovar,i,"biovar",1), 1.0);
                current_statement_begin__ = 122;
                stan::math::assign(get_base1_lhs(tlag,i,"tlag",1), 0.0);
            }
            current_statement_begin__ = 125;
            stan::math::assign(get_base1_lhs(theta,1,"theta",1), CL);
            current_statement_begin__ = 126;
            stan::math::assign(get_base1_lhs(theta,2,"theta",1), Q);
            current_statement_begin__ = 127;
            stan::math::assign(get_base1_lhs(theta,3,"theta",1), VC);
            current_statement_begin__ = 128;
            stan::math::assign(get_base1_lhs(theta,4,"theta",1), VP);
            current_statement_begin__ = 129;
            stan::math::assign(get_base1_lhs(theta,5,"theta",1), ka);
            current_statement_begin__ = 130;
            stan::math::assign(get_base1_lhs(theta,6,"theta",1), mtt);
            current_statement_begin__ = 131;
            stan::math::assign(get_base1_lhs(theta,7,"theta",1), circ0);
            current_statement_begin__ = 132;
            stan::math::assign(get_base1_lhs(theta,8,"theta",1), alpha);
            current_statement_begin__ = 133;
            stan::math::assign(get_base1_lhs(theta,9,"theta",1), gamma);
            current_statement_begin__ = 135;
            stan::math::assign(x, mixOde2CptModel_rk45(FK_ODE_functor__(), nOde, time, amt, rate, ii, evid, cmt, addl, ss, theta, biovar, tlag, pstream__, rtol, atol, max_step));
            current_statement_begin__ = 137;
            stan::math::assign(cHat, divide(col(x,2),VC));
            current_statement_begin__ = 138;
            stan::math::assign(neutHat, add(col(x,8),circ0));
            current_statement_begin__ = 140;
            for (int i = 1; i <= nObsPK; ++i) {
                current_statement_begin__ = 140;
                stan::math::assign(get_base1_lhs(cHatObs,i,"cHatObs",1), get_base1(cHat,get_base1(iObsPK,i,"iObsPK",1),"cHat",1));
            }
            current_statement_begin__ = 141;
            for (int i = 1; i <= nObsPD; ++i) {
                current_statement_begin__ = 141;
                stan::math::assign(get_base1_lhs(neutHatObs,i,"neutHatObs",1), get_base1(neutHat,get_base1(iObsPD,i,"iObsPD",1),"neutHat",1));
            }

            // validate transformed parameters
            for (int i0__ = 0; i0__ < nt; ++i0__) {
                if (stan::math::is_uninitialized(cHat(i0__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: cHat" << '[' << i0__ << ']';
                    throw std::runtime_error(msg__.str());
                }
            }
            for (int i0__ = 0; i0__ < nObsPK; ++i0__) {
                if (stan::math::is_uninitialized(cHatObs(i0__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: cHatObs" << '[' << i0__ << ']';
                    throw std::runtime_error(msg__.str());
                }
            }
            for (int i0__ = 0; i0__ < nt; ++i0__) {
                if (stan::math::is_uninitialized(neutHat(i0__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: neutHat" << '[' << i0__ << ']';
                    throw std::runtime_error(msg__.str());
                }
            }
            for (int i0__ = 0; i0__ < nObsPD; ++i0__) {
                if (stan::math::is_uninitialized(neutHatObs(i0__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: neutHatObs" << '[' << i0__ << ']';
                    throw std::runtime_error(msg__.str());
                }
            }
            for (int i0__ = 0; i0__ < nTheta; ++i0__) {
                if (stan::math::is_uninitialized(theta[i0__])) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: theta" << '[' << i0__ << ']';
                    throw std::runtime_error(msg__.str());
                }
            }
            for (int i0__ = 0; i0__ < nt; ++i0__) {
                for (int i1__ = 0; i1__ < (nOde + 3); ++i1__) {
                    if (stan::math::is_uninitialized(x(i0__,i1__))) {
                        std::stringstream msg__;
                        msg__ << "Undefined transformed parameter: x" << '[' << i0__ << ']' << '[' << i1__ << ']';
                        throw std::runtime_error(msg__.str());
                    }
                }
            }
            for (int i0__ = 0; i0__ < nTheta; ++i0__) {
                if (stan::math::is_uninitialized(biovar[i0__])) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: biovar" << '[' << i0__ << ']';
                    throw std::runtime_error(msg__.str());
                }
            }
            for (int i0__ = 0; i0__ < nTheta; ++i0__) {
                if (stan::math::is_uninitialized(tlag[i0__])) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: tlag" << '[' << i0__ << ']';
                    throw std::runtime_error(msg__.str());
                }
            }

            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            current_statement_begin__ = 111;
            current_statement_begin__ = 112;
            check_greater_or_equal(function__,"cHatObs",cHatObs,0);
            current_statement_begin__ = 113;
            current_statement_begin__ = 114;
            check_greater_or_equal(function__,"neutHatObs",neutHatObs,0);
            current_statement_begin__ = 115;
            for (int k0__ = 0; k0__ < nTheta; ++k0__) {
                check_greater_or_equal(function__,"theta[k0__]",theta[k0__],0);
            }
            current_statement_begin__ = 116;
            current_statement_begin__ = 117;
            current_statement_begin__ = 118;

            // model body

            current_statement_begin__ = 148;
            lp_accum__.add(normal_log<propto__>(CL, 0, 20));
            current_statement_begin__ = 149;
            lp_accum__.add(normal_log<propto__>(Q, 0, 20));
            current_statement_begin__ = 150;
            lp_accum__.add(normal_log<propto__>(VC, 0, 100));
            current_statement_begin__ = 151;
            lp_accum__.add(normal_log<propto__>(VP, 0, 1000));
            current_statement_begin__ = 152;
            lp_accum__.add(normal_log<propto__>(ka, 0, 5));
            current_statement_begin__ = 153;
            lp_accum__.add(cauchy_log<propto__>(sigma, 0, 1));
            current_statement_begin__ = 155;
            lp_accum__.add(lognormal_log<propto__>(mtt, stan::math::log(mttPrior), mttPriorCV));
            current_statement_begin__ = 156;
            lp_accum__.add(lognormal_log<propto__>(circ0, stan::math::log(circ0Prior), circ0PriorCV));
            current_statement_begin__ = 157;
            lp_accum__.add(lognormal_log<propto__>(alpha, stan::math::log(alphaPrior), alphaPriorCV));
            current_statement_begin__ = 158;
            lp_accum__.add(lognormal_log<propto__>(gamma, stan::math::log(gammaPrior), gammaPriorCV));
            current_statement_begin__ = 159;
            lp_accum__.add(cauchy_log<propto__>(sigmaNeut, 0, 1));
            current_statement_begin__ = 162;
            lp_accum__.add(lkj_corr_cholesky_log<propto__>(L, 1));
            current_statement_begin__ = 163;
            lp_accum__.add(cauchy_log<propto__>(omega, 0, 1));
            current_statement_begin__ = 166;
            lp_accum__.add(normal_log<propto__>(logCObs, stan::math::log(cObs), sigma));
            current_statement_begin__ = 167;
            lp_accum__.add(normal_log<propto__>(logNeutObs, stan::math::log(neutObs), sigmaNeut));

        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        lp_accum__.add(lp__);
        return lp_accum__.sum();

    } // log_prob()

    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }


    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("CL");
        names__.push_back("Q");
        names__.push_back("VC");
        names__.push_back("VP");
        names__.push_back("ka");
        names__.push_back("mtt");
        names__.push_back("circ0");
        names__.push_back("alpha");
        names__.push_back("gamma");
        names__.push_back("sigma");
        names__.push_back("sigmaNeut");
        names__.push_back("L");
        names__.push_back("omega");
        names__.push_back("cHat");
        names__.push_back("cHatObs");
        names__.push_back("neutHat");
        names__.push_back("neutHatObs");
        names__.push_back("theta");
        names__.push_back("x");
        names__.push_back("biovar");
        names__.push_back("tlag");
    }


    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(nIIV);
        dims__.push_back(nIIV);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(nIIV);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(nt);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(nObsPK);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(nt);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(nObsPD);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(nTheta);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(nt);
        dims__.push_back((nOde + 3));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(nTheta);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(nTheta);
        dimss__.push_back(dims__);
    }

    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        typedef double local_scalar_t__;

        vars__.resize(0);
        stan::io::reader<local_scalar_t__> in__(params_r__,params_i__);
        static const char* function__ = "FribergKarlsson_model_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning
        // read-transform, write parameters
        double CL = in__.scalar_lb_constrain(0);
        double Q = in__.scalar_lb_constrain(0);
        double VC = in__.scalar_lb_constrain(0);
        double VP = in__.scalar_lb_constrain(0);
        double ka = in__.scalar_lb_constrain(0);
        double mtt = in__.scalar_lb_constrain(0);
        double circ0 = in__.scalar_lb_constrain(0);
        double alpha = in__.scalar_lb_constrain(0);
        double gamma = in__.scalar_lb_constrain(0);
        double sigma = in__.scalar_lb_constrain(0);
        double sigmaNeut = in__.scalar_lb_constrain(0);
        matrix_d L = in__.cholesky_corr_constrain(nIIV);
        vector_d omega = in__.vector_lb_constrain(0,nIIV);
        vars__.push_back(CL);
        vars__.push_back(Q);
        vars__.push_back(VC);
        vars__.push_back(VP);
        vars__.push_back(ka);
        vars__.push_back(mtt);
        vars__.push_back(circ0);
        vars__.push_back(alpha);
        vars__.push_back(gamma);
        vars__.push_back(sigma);
        vars__.push_back(sigmaNeut);
            for (int k_1__ = 0; k_1__ < nIIV; ++k_1__) {
                for (int k_0__ = 0; k_0__ < nIIV; ++k_0__) {
                vars__.push_back(L(k_0__, k_1__));
                }
            }
            for (int k_0__ = 0; k_0__ < nIIV; ++k_0__) {
            vars__.push_back(omega[k_0__]);
            }

        // declare and define transformed parameters
        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;

        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        try {
            current_statement_begin__ = 111;
            validate_non_negative_index("cHat", "nt", nt);
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  cHat(static_cast<Eigen::VectorXd::Index>(nt));
            (void) cHat;  // dummy to suppress unused var warning

            stan::math::initialize(cHat, DUMMY_VAR__);
            stan::math::fill(cHat,DUMMY_VAR__);
            current_statement_begin__ = 112;
            validate_non_negative_index("cHatObs", "nObsPK", nObsPK);
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  cHatObs(static_cast<Eigen::VectorXd::Index>(nObsPK));
            (void) cHatObs;  // dummy to suppress unused var warning

            stan::math::initialize(cHatObs, DUMMY_VAR__);
            stan::math::fill(cHatObs,DUMMY_VAR__);
            current_statement_begin__ = 113;
            validate_non_negative_index("neutHat", "nt", nt);
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  neutHat(static_cast<Eigen::VectorXd::Index>(nt));
            (void) neutHat;  // dummy to suppress unused var warning

            stan::math::initialize(neutHat, DUMMY_VAR__);
            stan::math::fill(neutHat,DUMMY_VAR__);
            current_statement_begin__ = 114;
            validate_non_negative_index("neutHatObs", "nObsPD", nObsPD);
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  neutHatObs(static_cast<Eigen::VectorXd::Index>(nObsPD));
            (void) neutHatObs;  // dummy to suppress unused var warning

            stan::math::initialize(neutHatObs, DUMMY_VAR__);
            stan::math::fill(neutHatObs,DUMMY_VAR__);
            current_statement_begin__ = 115;
            validate_non_negative_index("theta", "nTheta", nTheta);
            vector<local_scalar_t__> theta(nTheta);
            stan::math::initialize(theta, DUMMY_VAR__);
            stan::math::fill(theta,DUMMY_VAR__);
            current_statement_begin__ = 116;
            validate_non_negative_index("x", "nt", nt);
            validate_non_negative_index("x", "(nOde + 3)", (nOde + 3));
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,Eigen::Dynamic>  x(static_cast<Eigen::VectorXd::Index>(nt),static_cast<Eigen::VectorXd::Index>((nOde + 3)));
            (void) x;  // dummy to suppress unused var warning

            stan::math::initialize(x, DUMMY_VAR__);
            stan::math::fill(x,DUMMY_VAR__);
            current_statement_begin__ = 117;
            validate_non_negative_index("biovar", "nTheta", nTheta);
            vector<local_scalar_t__> biovar(nTheta);
            stan::math::initialize(biovar, DUMMY_VAR__);
            stan::math::fill(biovar,DUMMY_VAR__);
            current_statement_begin__ = 118;
            validate_non_negative_index("tlag", "nTheta", nTheta);
            vector<local_scalar_t__> tlag(nTheta);
            stan::math::initialize(tlag, DUMMY_VAR__);
            stan::math::fill(tlag,DUMMY_VAR__);


            current_statement_begin__ = 120;
            for (int i = 1; i <= nTheta; ++i) {

                current_statement_begin__ = 121;
                stan::math::assign(get_base1_lhs(biovar,i,"biovar",1), 1.0);
                current_statement_begin__ = 122;
                stan::math::assign(get_base1_lhs(tlag,i,"tlag",1), 0.0);
            }
            current_statement_begin__ = 125;
            stan::math::assign(get_base1_lhs(theta,1,"theta",1), CL);
            current_statement_begin__ = 126;
            stan::math::assign(get_base1_lhs(theta,2,"theta",1), Q);
            current_statement_begin__ = 127;
            stan::math::assign(get_base1_lhs(theta,3,"theta",1), VC);
            current_statement_begin__ = 128;
            stan::math::assign(get_base1_lhs(theta,4,"theta",1), VP);
            current_statement_begin__ = 129;
            stan::math::assign(get_base1_lhs(theta,5,"theta",1), ka);
            current_statement_begin__ = 130;
            stan::math::assign(get_base1_lhs(theta,6,"theta",1), mtt);
            current_statement_begin__ = 131;
            stan::math::assign(get_base1_lhs(theta,7,"theta",1), circ0);
            current_statement_begin__ = 132;
            stan::math::assign(get_base1_lhs(theta,8,"theta",1), alpha);
            current_statement_begin__ = 133;
            stan::math::assign(get_base1_lhs(theta,9,"theta",1), gamma);
            current_statement_begin__ = 135;
            stan::math::assign(x, mixOde2CptModel_rk45(FK_ODE_functor__(), nOde, time, amt, rate, ii, evid, cmt, addl, ss, theta, biovar, tlag, pstream__, rtol, atol, max_step));
            current_statement_begin__ = 137;
            stan::math::assign(cHat, divide(col(x,2),VC));
            current_statement_begin__ = 138;
            stan::math::assign(neutHat, add(col(x,8),circ0));
            current_statement_begin__ = 140;
            for (int i = 1; i <= nObsPK; ++i) {
                current_statement_begin__ = 140;
                stan::math::assign(get_base1_lhs(cHatObs,i,"cHatObs",1), get_base1(cHat,get_base1(iObsPK,i,"iObsPK",1),"cHat",1));
            }
            current_statement_begin__ = 141;
            for (int i = 1; i <= nObsPD; ++i) {
                current_statement_begin__ = 141;
                stan::math::assign(get_base1_lhs(neutHatObs,i,"neutHatObs",1), get_base1(neutHat,get_base1(iObsPD,i,"iObsPD",1),"neutHat",1));
            }

            // validate transformed parameters
            current_statement_begin__ = 111;
            current_statement_begin__ = 112;
            check_greater_or_equal(function__,"cHatObs",cHatObs,0);
            current_statement_begin__ = 113;
            current_statement_begin__ = 114;
            check_greater_or_equal(function__,"neutHatObs",neutHatObs,0);
            current_statement_begin__ = 115;
            for (int k0__ = 0; k0__ < nTheta; ++k0__) {
                check_greater_or_equal(function__,"theta[k0__]",theta[k0__],0);
            }
            current_statement_begin__ = 116;
            current_statement_begin__ = 117;
            current_statement_begin__ = 118;

            // write transformed parameters
            if (include_tparams__) {
            for (int k_0__ = 0; k_0__ < nt; ++k_0__) {
            vars__.push_back(cHat[k_0__]);
            }
            for (int k_0__ = 0; k_0__ < nObsPK; ++k_0__) {
            vars__.push_back(cHatObs[k_0__]);
            }
            for (int k_0__ = 0; k_0__ < nt; ++k_0__) {
            vars__.push_back(neutHat[k_0__]);
            }
            for (int k_0__ = 0; k_0__ < nObsPD; ++k_0__) {
            vars__.push_back(neutHatObs[k_0__]);
            }
            for (int k_0__ = 0; k_0__ < nTheta; ++k_0__) {
            vars__.push_back(theta[k_0__]);
            }
            for (int k_1__ = 0; k_1__ < (nOde + 3); ++k_1__) {
                for (int k_0__ = 0; k_0__ < nt; ++k_0__) {
                vars__.push_back(x(k_0__, k_1__));
                }
            }
            for (int k_0__ = 0; k_0__ < nTheta; ++k_0__) {
            vars__.push_back(biovar[k_0__]);
            }
            for (int k_0__ = 0; k_0__ < nTheta; ++k_0__) {
            vars__.push_back(tlag[k_0__]);
            }
            }
            if (!include_gqs__) return;
            // declare and define generated quantities



            // validate generated quantities

            // write generated quantities
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }

    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng,params_r_vec,params_i_vec,vars_vec,include_tparams,include_gqs,pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }

    static std::string model_name() {
        return "FribergKarlsson_model";
    }


    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        param_name_stream__.str(std::string());
        param_name_stream__ << "CL";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "Q";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "VC";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "VP";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "ka";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "mtt";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "circ0";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "alpha";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "gamma";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigma";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigmaNeut";
        param_names__.push_back(param_name_stream__.str());
        for (int k_1__ = 1; k_1__ <= nIIV; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= nIIV; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "L" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_0__ = 1; k_0__ <= nIIV; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "omega" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }

        if (!include_gqs__ && !include_tparams__) return;

        if (include_tparams__) {
            for (int k_0__ = 1; k_0__ <= nt; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "cHat" << '.' << k_0__;
                param_names__.push_back(param_name_stream__.str());
            }
            for (int k_0__ = 1; k_0__ <= nObsPK; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "cHatObs" << '.' << k_0__;
                param_names__.push_back(param_name_stream__.str());
            }
            for (int k_0__ = 1; k_0__ <= nt; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "neutHat" << '.' << k_0__;
                param_names__.push_back(param_name_stream__.str());
            }
            for (int k_0__ = 1; k_0__ <= nObsPD; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "neutHatObs" << '.' << k_0__;
                param_names__.push_back(param_name_stream__.str());
            }
            for (int k_0__ = 1; k_0__ <= nTheta; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "theta" << '.' << k_0__;
                param_names__.push_back(param_name_stream__.str());
            }
            for (int k_1__ = 1; k_1__ <= (nOde + 3); ++k_1__) {
                for (int k_0__ = 1; k_0__ <= nt; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "x" << '.' << k_0__ << '.' << k_1__;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            for (int k_0__ = 1; k_0__ <= nTheta; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "biovar" << '.' << k_0__;
                param_names__.push_back(param_name_stream__.str());
            }
            for (int k_0__ = 1; k_0__ <= nTheta; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "tlag" << '.' << k_0__;
                param_names__.push_back(param_name_stream__.str());
            }
        }


        if (!include_gqs__) return;
    }


    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        param_name_stream__.str(std::string());
        param_name_stream__ << "CL";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "Q";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "VC";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "VP";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "ka";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "mtt";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "circ0";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "alpha";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "gamma";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigma";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigmaNeut";
        param_names__.push_back(param_name_stream__.str());
        for (int k_0__ = 1; k_0__ <= ((nIIV * (nIIV - 1)) / 2); ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "L" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= nIIV; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "omega" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }

        if (!include_gqs__ && !include_tparams__) return;

        if (include_tparams__) {
            for (int k_0__ = 1; k_0__ <= nt; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "cHat" << '.' << k_0__;
                param_names__.push_back(param_name_stream__.str());
            }
            for (int k_0__ = 1; k_0__ <= nObsPK; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "cHatObs" << '.' << k_0__;
                param_names__.push_back(param_name_stream__.str());
            }
            for (int k_0__ = 1; k_0__ <= nt; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "neutHat" << '.' << k_0__;
                param_names__.push_back(param_name_stream__.str());
            }
            for (int k_0__ = 1; k_0__ <= nObsPD; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "neutHatObs" << '.' << k_0__;
                param_names__.push_back(param_name_stream__.str());
            }
            for (int k_0__ = 1; k_0__ <= nTheta; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "theta" << '.' << k_0__;
                param_names__.push_back(param_name_stream__.str());
            }
            for (int k_1__ = 1; k_1__ <= (nOde + 3); ++k_1__) {
                for (int k_0__ = 1; k_0__ <= nt; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "x" << '.' << k_0__ << '.' << k_1__;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            for (int k_0__ = 1; k_0__ <= nTheta; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "biovar" << '.' << k_0__;
                param_names__.push_back(param_name_stream__.str());
            }
            for (int k_0__ = 1; k_0__ <= nTheta; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "tlag" << '.' << k_0__;
                param_names__.push_back(param_name_stream__.str());
            }
        }


        if (!include_gqs__) return;
    }

}; // model

}

typedef FribergKarlsson_model_namespace::FribergKarlsson_model stan_model;

