#+TITLE: Torsten: A Pharmacokinetic/Pharmacodynamic Model Library for Stan
#+SUBTITLE: User Manual @@latex:\\@@ @@html:<br>@@ (Torsten Version 0.87, Stan version 2.19.1)
#+LATEX_CLASS: amsbook
#+LATEX_CLASS_OPTIONS: [11pt, reqno, oneside]

# title page
#+LATEX_HEADER: \newcommand\subtitle[1]{\newcommand\mrgsubtitle{#1}}
#+LATEX_HEADER: \newcommand\mrgproject{Torsten}
#+LATEX_HEADER: \newcommand\mrgtitle{Torsten: A Pharmacokinetic/Pharmacodynamic Model Library for Stan}
#+LATEX_HEADER: \newcommand\mrgsubtitle{\Large{User Manual} \linebreak (Torsten Version 0.87, Stan version 2.19.1)}
#+LATEX_HEADER: \include{mrgtitlepage}

# make index
#+LATEX_HEADER: \usepackage{imakeidx}
#+LATEX_HEADER: \makeindex

#+LATEX_HEADER: \usepackage[letterpaper, width=6.5in, height=9in]{geometry}
#+LATEX_HEADER: \usepackage{graphicx}
#+LATEX_HEADER: \usepackage{pdfpages}
#+LATEX_HEADER: \usepackage{amssymb}
#+LATEX_HEADER: \usepackage{epstopdf}

# define MRG branding color
#+LATEX_HEADER: \usepackage{xcolor}
#+LATEX_HEADER: \definecolor{MRGGreen}{rgb}{0, 0.350, 0.200}
#+LATEX_HEADER: \usepackage[colorlinks=true, citecolor=MRGGreen, urlcolor=MRGGreen, linkcolor=MRGGreen]{hyperref}

#+LATEX_HEADER: \usepackage{courier}
#+LATEX_HEADER: \usepackage{listings}
#+LATEX_HEADER: \usepackage{siunitx}
#+LATEX_HEADER: \usepackage{booktabs}
#+LATEX_HEADER: \usepackage[framemethod=TikZ, skipabove=10pt, skipbelow=10pt, backgroundcolor=black!5, roundcorner=4pt, linewidth=1pt]{mdframed}
#+LATEX_HEADER: \BeforeBeginEnvironment{minted}{\begin{mdframed}}
#+LATEX_HEADER: \AfterEndEnvironment{minted}{\end{mdframed}}

#+LATEX_HEADER: \usepackage{subcaption}

# remove "chapter" in chapter name
#+LATEX_HEADER: \renewcommand{\chaptername}{}
#+LATEX_HEADER: \numberwithin{equation}{chapter}
#+LATEX_HEADER: \numberwithin{figure}{chapter}
#+LATEX_HEADER: \numberwithin{table}{chapter}

#+LATEX_HEADER: \usepackage[section]{placeins}

#+LATEX_HEADER: \theoremstyle{remark}
#+LATEX_HEADER: \newtheorem{example}{Example}
#+LATEX_HEADER: \newtheorem{remark}{Remark}

#+MACRO: torsten_ver v0.87
#+MACRO: stan_ver v2.19.1
#+MACRO: newline @@latex:\\@@ @@html:<br>@@ @@ascii:|@@
#+MACRO: torsten_path /Users/yiz/Work/Torsten

#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="https://www.pirilampo.org/styles/readtheorg/css/htmlize.css"/>
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="https://www.pirilampo.org/styles/readtheorg/css/readtheorg.css"/>

#+HTML_HEAD: <script src="https://ajax.googleapis.com/ajax/libs/jquery/2.1.3/jquery.min.js"></script>
#+HTML_HEAD: <script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.4/js/bootstrap.min.js"></script>
#+HTML_HEAD: <script type="text/javascript" src="https://www.pirilampo.org/styles/lib/js/jquery.stickytableheaders.min.js"></script>
#+HTML_HEAD: <script type="text/javascript" src="https://www.pirilampo.org/styles/readtheorg/js/readtheorg.js"></script>

#+OPTIONS: title:t, num:3

** Development team
  :PROPERTIES:
  :UNNUMBERED: t
  :END:
*** Bill Gillespie
    [[mailto:billg@metrumrg.com][~billg@metrumrg.com~]],
    Metrum Research Group, LLC
*** Yi Zhang
    [[mailto:yiz@metrumrg.com][~yiz@metrumrg.com~]], Metrum Research Group, LLC
*** Charles Margossian
    [[mailto:charles.margossian@columbia.edu][~charles.margossian@columbia.edu~]], Columbia University, Department of Statistics(formerly Metrum Research Group, LLC)

* Acknowledgements
  :PROPERTIES:
  :UNNUMBERED: t
  :END:
** Institutions
We thank Metrum Research Group, Columbia University, and AstraZeneca.
** Funding
This work was funded in part by the following organizations:
*** Office of Naval Research (ONR) contract N00014-16-P-2039
  provided as part of the Small Business Technology Transfer (STTR)
  program. The content of the information presented in this document
  does not necessarily reflect the position or policy of the
  Government and no official endorsement should be inferred.
*** Bill & Melinda Gates Foundation.
** Individuals
  We thank the Stan Development Team for giving us guidance on how to
  create new Stan functions and adding features to Stan's core language
  that facilitate building ODE-based models.

  We also thank Kyle Baron and Hunter Ford for helpful advice on coding
  in C++ and using GitHub, Curtis Johnston for reviewing the User
  Manual, and Yaming Su for using Torsten and giving us feedback.

* Introduction
Stan is an open source probabilistic programing language designed
primarily to do Bayesian data analysis
cite:carpenter17_stan. 


Several of its
features make it a powerful tool to specify and fit complex
models. First, its language is very expressive and
flexible. Secondly, it implements a variant of No U-Turn
Sampler(NUTS), an adaptative Hamiltonian Monte Carlo
algorithm that was proven more efficient than commonly used Monte Carlo Markov Chains
(MCMC) samplers for complex high dimensional problems cite:hoffman_no-u-turn_2011,betancourt_hmc_2018. Our
goal is to harness these innovations and make Stan a better
software for pharmacometrics modeling. Our efforts are twofold:
1. We contribute to the development of features, such as functions that support differential equations based models, and implement them directly into Stan's core language.
2. We develop Torsten, an extension with specialized pharmacometrics functions.

Throughout the process, we work very closely with the Stan Development
Team. We have benefited immensely from their mentorship, advice, and
feedback. Just like Stan, Torsten is an open source project that
fosters collaborative work. Interested in contributing?
Comment at Torsten repository

[[https://github.com/metrumresearchgroup/Torsten][https://github.com/metrumresearchgroup/Torsten]] 

or shoot us an
e-mail([[mailto:billg@metrumrg.com][billg@metrumrg.com]], [[mailto:yz@yizh.org][yz@yizh.org]])and we will help you help us!

Torsten is licensed under the BSD 3-clause license.

# *** *
#     :PROPERTIES:
#     :UNNUMBERED: t
#     :END:
#+begin_mdframed
*WARNING:* The current version of Torsten is a /prototype/. It
is being released for review and comment, and to support limited
research applications. It has not been rigorously tested and should
not be used for critical applications without further testing or
cross-checking by comparison with other methods.

We encourage interested users to try Torsten out and are happy to
assist. Please report issues, bugs, and feature requests on
[[https://github.com/metrumresearchgroup/stan][our GitHub page]].
#+end_mdframed

** Overview
   :PROPERTIES:
   :CUSTOM_ID: overview
   :END:
Torsten is a collection of Stan functions to facilitate analysis of
pharmacometric data using Stan. The current version
includes:
- Specific linear compartment models:
  + One compartment model with first order absorption.
  + Two compartment model with elimination from and first order absorption into central compartment
- General linear compartment model described by a system of first-order \underline{linear} Ordinary Differential Equations (ODEs).
- General compartment model described by a system of first order ODEs.
- Mix compartment model with PK forcing function described by a linear one or two compartment model.

The models and data format are based on
NONMEM\textregistered{}[fn::NONMEM\textregistered{} is licensed and distributed by ICON Development Solutions.]/NMTRAN/PREDPP
conventions including:
- Recursive calculation of model predictions
  + This permits piecewise constant covariate values
- Bolus or constant rate inputs into any compartment
- Handles single dose and multiple dose histories
- Handles steady state dosing histories
  + Note: The infusion time must be shorter than the inter-dose interval.
- Implemented NMTRAN data items include: TIME, EVID, CMT, AMT, RATE, ADDL, II, SS

In general, all real variables may be passed as model parameters. A
few exceptions apply /to functions which use a numerical
integrator(i.e. the general and the mix compartment
models). The below listed cases present technical difficulties, which we expect to
overcome in Torsten's next release:
- In the case of a multiple truncated infusion rate dosing regimen:
  + The bioavailability (F) and the amount (AMT) must be fixed.

This library provides Stan language functions that calculate amounts
in each compartment, given an event schedule and an ODE system.

** Implementation summary
    :PROPERTIES:
    :CUSTOM_ID: imp_details
    :END:
- Current Torsten {{{torsten_ver}}} is based on Stan {{{stan_ver}}}.
- All functions are programmed in C++ and are compatible
  with the Stan math automatic differentiation library cite:carpenter15_stan_math_librar
- One and two compartment models are based on analytical solutions of governing ODEs.
- General linear compartment models are based on semi-analytical solutions using the built-in matrix exponential function
- General compartment models are solved numerically using built-in ODE integrators in Stan. The tuning parameters of the solver are adjustable. The steady state solution is calculated using a numerical algebraic solver.
- A mix compartment model's PK forcing function is solved
  analytically, and its forced ODE system is solved
  numerically.

** Development plans
    :PROPERTIES:
    :CUSTOM_ID: dev_plans
    :END:

Our current plans for future development of Torsten include the
following:
- Build a system to easily share packages of Stan functions
  (written in C++ or in the Stan language)
- Allow numerical methods to handle
  bioavailability fraction (F) as parameters in all cases.
- Optimize Matrix exponential functions
  + Function for the action of Matrix Exponential on a vector
  + Hand-coded gradients
  + Special algorithm for matrices with special properties
- Fix issue that arises when computing the adjoint of the lag time
  parameter (in a dosing compartment) evaluated at $t_{\text{lag}} = 0$.
- Extend formal tests
  + We want more C++ Google unit tests to address cases users may
    encounter
  + Comparison with simulations from the R package
    =mrgsolve= and the software NONMEM\textregistered{}
  + Recruit non-developer users to conduct beta testing

** Changelog
:PROPERTIES:
:CUSTOM_ID: changelog
:END:
*** 0.87 <2019-07-26 Fri>
**** Added
     :PROPERTIES:
     :CUSTOM_ID: 0-85-added
     :END:
  - MPI dynamic load balance for Torsten's population ODE integrators
    + src_stan[:exports code]{pmx_integrate_ode_group_adams}
    + src_stan[:exports code]{pmx_integrate_ode_group_bdf}
    + src_stan[:exports code]{pmx_integrate_ode_group_rk45}
    To invoke dynamic load balance instead of default static
    balance for MPI, issue =TORSTEN_MPI=2= in =make/local=.
  - Support =RATE= as parameter in src_stan[:exports code]{pmx_solve_rk45/bdf/adams}
    functions.
**** Changed
     :PROPERTIES:
     :CUSTOM_ID: 0-85-changed
     :END:
  - Some fixes on steady-state solvers
  - Update to rstan version 2.19.2.

*** 0.86 <2019-05-15 Wed>
**** Added
     :PROPERTIES:
     :CUSTOM_ID: 0-85-added
     :END:
  - Torsten's ODE integrator functions
    + src_stan[:exports code]{pmx_integrate_ode_adams}
    + src_stan[:exports code]{pmx_integrate_ode_bdf}
    + src_stan[:exports code]{pmx_integrate_ode_rk45}
    and their counterparts to solve a population/group of
    subjects governed by an ODE
    + src_stan[:exports code]{pmx_integrate_ode_group_adams}
    + src_stan[:exports code]{pmx_integrate_ode_group_bdf}
    + src_stan[:exports code]{pmx_integrate_ode_group_rk45}
  - Torsten's population PMX solver functions for general
    ODE models
    + src_stan[:exports code]{pmx_solve_group_adams}
    + src_stan[:exports code]{pmx_solve_group_bdf}
    + src_stan[:exports code]{pmx_solve_group_rk45}
  - Support time step =ts= as parameter in src_stan[:exports code]{pmx_integrate_ode_xxx}
    solvers.
**** Changed
     :PROPERTIES:
     :CUSTOM_ID: 0-85-changed
     :END:
  - Renaming Torsten functions in previous releases, the
    old-new name mapping is
    + src_stan[:exports code]{PKModelOneCpt} \rightarrow src_stan[:exports code]{pmx_solve_onecpt}
    + src_stan[:exports code]{PKModelTwoCpt} \rightarrow src_stan[:exports code]{pmx_solve_onecpt}
    + src_stan[:exports code]{linOdeModel} \rightarrow src_stan[:exports code]{pmx_solve_linode}
    + src_stan[:exports code]{generalOdeModel_adams} \rightarrow src_stan[:exports code]{pmx_solve_adams}
    + src_stan[:exports code]{generalOdeModel_bdf} \rightarrow src_stan[:exports code]{pmx_solve_bdf}
    + src_stan[:exports code]{generalOdeModel_rk45} \rightarrow src_stan[:exports code]{pmx_solve_rk45}
    + src_stan[:exports code]{mixOde1CptModel_bdf} \rightarrow src_stan[:exports code]{pmx_solve_onecpt_bdf}
    + src_stan[:exports code]{mixOde1CptModel_rk45} \rightarrow src_stan[:exports code]{pmx_solve_onecpt_rk45}
    + src_stan[:exports code]{mixOde2CptModel_bdf} \rightarrow src_stan[:exports code]{pmx_solve_twocpt_bdf}
    + src_stan[:exports code]{mixOde2CptModel_rk45} \rightarrow src_stan[:exports code]{pmx_solve_twocpt_rk45}
    Note that the new version of the above functions return
    the /transpose/ of the matrix returned by the old
    versions, in order to improve memory efficiency. The old version are retained but will be
    deprecated in the future. 
  - Update to Stan version 2.19.1.
      
*** 0.85 <2018-12-04 Tue>
**** Added
     :PROPERTIES:
     :CUSTOM_ID: 0-85-added
     :END:
  - Dosing rate as parameter
**** Changed
     :PROPERTIES:
     :CUSTOM_ID: 0-85-changed
     :END:
  - Update to Stan version 2.18.0.

*** 0.84 <2018-02-24>
**** Added
     :PROPERTIES:
     :CUSTOM_ID: 0-84-added
     :END:
  - Piecewise linear interpolation function.
  - Univariate integral functions.

**** Changed
     :PROPERTIES:
     :CUSTOM_ID: 0-84-changed
     :END:
  - Update to Stan version 2.17.1.
  - Minor revisions to User Manual.
  - Bugfixes.

*** 0.83 <2017-08-02>
**** Added
     :PROPERTIES:
     :CUSTOM_ID: 0-83-added
     :END:
  - Work with TorstenHeaders
  - Each chain has a different initial estimate

**** Changed
     :PROPERTIES:
     :CUSTOM_ID: 0-83-changed
     :END:
  - User manual
  - Fix misspecification in ODE system for TwoCpt example.
  - Other bugfixes


*** 0.82 <2017-01-29>
    :PROPERTIES:
    :CUSTOM_ID: 0-82-added
    :END:
**** Added
  - Allow parameter arguments to be passed as 1D or 2D arrays
  - More unit tests
  - Unit tests check automatic differentiation against finite differentiation.

**** Changed
     :PROPERTIES:
     :CUSTOM_ID: 0-82-changed
     :END:
  - Split the parameter argument into three arguments: pMatrix
    (parameters for the ODEs -- note: for =linOdeModel=, pMatrix
    is replaced by the constant rate matrix K), biovar
    (parameters for the biovariability), and tlag (parameters
    for the lag time).
  - bugfixes

*** 0.81 <2016-09-27>
**** Added
     :PROPERTIES:
     :CUSTOM_ID: 0-81-added
     :END:
  linCptModel (linear compartmental model) function

*** 0.80a <2016-09-21 Wed>
**** Added
     :PROPERTIES:
     :CUSTOM_ID: 0-80a-added
     :END:
  check\under{}finite statements in pred\under{}1 and pred\under{}2 to reject metropolis proposal if initial conditions are not finite

* Installation
   :PROPERTIES:
   :CUSTOM_ID: installation
   :END:
We are working with Stan development team to create a
system to add and share Stan packages. In the mean time,
the current repo contains forked version of Stan with
Torsten. The latest version of Torsten ({{{torsten_ver}}}) is
compatible with Stan {{{stan_ver}}}. Torsten is agnostic to which
Stan interface you use. Here we provide command line and R
interfaces.

** Command line interface
 After downloading the project 

- https://github.com/metrumresearchgroup/Torsten

The command line interface ~cmdstan~ is available to use without
installation. The following command
builds a Torsten model ~model_name~ in ~model_path~
#+BEGIN_SRC sh
  cd $TORSTEN_PATH/cmdstan; make model_path/model_name
#+END_SRC

*** MPI support
Torsten's MPI support is of a different flavour than
=map_rect= found in Stan. To be able to utilize MPI
parallelisation, one first needs to ensure an MPI library
such as 
- https://www.mpich.org/downloads/
- https://www.open-mpi.org/software/ompi/
is available in the OS. Torsen's implementation is tested on
both =MPICH= and =OpenMPI=.

Then, to use MPI-supported population/group solvers,
add/edit =make/local=
#+BEGIN_SRC sh
  TORSTEN_MPI=1

  # path to MPI headers
  CXXFLAGS += -isystem /usr/local/include
  # if you are using Metrum's metworx platform, add MPICH3's
  # headers with
  # CXXFLAGS += -isystem /usr/local/mpich3/include
#+END_SRC
Note that currently =TORSTEN_MPI= and =STAN_MPI= flags
conflict on processes management and cannot be used in a
same Stan model, and MPI support is only available through =cmdstan=
interface.
** R interface
   The R interface is based on [[https://cran.r-project.org/web/packages/rstan/index.html][rstan]], the Stan's interface for
   R. To install R version of Torsten, at ~$TORSTEN_PATH~, in R
#+BEGIN_SRC R
  source('install.R')
#+END_SRC    

Please ensure the R toolchain includes a C++ compiler with
C++14 support. In particular, R 3.4.0 and later is
recommended as it contains toolchain based on gcc 4.9.3. On
Windows platform, such a toolchain can be found in Rtools34 and later.

Please ensure =.R/Makevars= constains the following flags
#+BEGIN_SRC sh
  CXX14 = g++ -fPIC               # or CXX14 = clang++ -fPIC

  CXXFLAGS=-O3 -std=c++1y -mtune=native -march=native -Wno-unused-variable -Wno-unused-function
  CXXFLAGS += -DBOOST_MPL_CFG_NO_PREPROCESSED_HEADERS -DBOOST_MPL_LIMIT_LIST_SIZE=30

  CXX14FLAGS=-O3 -std=c++1y -mtune=native -march=native -Wno-unused-variable -Wno-unused-function
  CXX14FLAGS += -DBOOST_MPL_CFG_NO_PREPROCESSED_HEADERS -DBOOST_MPL_LIMIT_LIST_SIZE=30
#+END_SRC

Fore more information of setting up =makevar= and its
functionality, see 
- [[http://dirk.eddelbuettel.com/code/rcpp/Rcpp-package.pdf]]
For more information of installation troubleshooting,
please consult [[https://github.com/stan-dev/rstan/wiki][rstan wiki]].

** Testing
With project in ~torsten_path~, set the envionment variable
src_sh[:exports code]{TORSTEN_PATH} as
#+BEGIN_SRC sh
  # in bash
  export TORSTEN_PATH=torsten_path
  # in csh
  setenv TORSTEN_PATH torsten_path
#+END_SRC

To test the installation, run
#+BEGIN_SRC sh
  ./test-torsten.sh --unit        # math unit test
  ./test-torsten.sh --signature   # stan function # signature test
  ./test-torsten.sh --model       # R model test, takes long time to finish
#+END_SRC

* Using Torsten
The reader should have a basic understanding of how Stan works before
reading this chapter. There are excellent resources online to get
started with Stan
- [[http://mc-stan.org/documentation][http://mc-stan.org/documentation]]


In this section we go through the different functions Torsten adds to
Stan. The code for the examples can be found at
- [[https://github.com/metrumresearchgroup/example-models][https://github.com/metrumresearchgroup/example-models]]

and also at the =example-models= foler of your =TORSTEN_PATH=.

** One Compartment Model
<<sec:onecpt>>
#+LABEL: sec:OneCpt
#+INDEX: One Compartment Model
#+BEGIN_SRC stan
  matrix = pmx_solve_onecpt(real[] time, real[] amt, real[] rate,
                                 real[] ii, int[] evid, int[] cmt,
                                 real[] addl, int[] ss, real[] theta,
                                 real[] biovar, real[] tlag)
#+END_SRC

#+CAPTION: One and two compartment models with first order absorption implemented in Torsten.
#+NAME: one_two_cpt_models
#+ATTR_LATEX: :width 2.0in
[[file:./graphics/cptModels.png]]

Torsten function =pmx_solve_onecpt= solves one-compartment PK
models(Figure [[one_two_cpt_models]]). The model obtains plasma concentrations of parent drug $c=y_2/V_2$
by solving for the mass of drug in the central compartment
$y_2$ from ordinary differential equations(ODEs)
\begin{subequations}
\begin{align}
  y_1' &= -k_a y_1, \\
  y_2' &= k_a y_1 - \left(\frac{CL}{V_2} + \frac{Q}{V_2}\right) y_2.
\end{align}
\label{eq:onecpt}
\end{subequations}

- ODE Parameters ~theta~ consists of $CL$, $V_2$, $k_a$, in that order.
- The event arguments ~time~, ~amt~, ~rate~, ~ii~, ~evid~, ~cmt~, ~addl~, and
  ~ss~, describe the event schedule of the clinical
  trial. All arrays have the same length corresponding to the number of events.
- The model arguments, other than ~theta~, include
  + ~biovar~, the bioavailability fraction in each compartment
  + ~tlag~, the lag time in each compartment. 
- ~theta~, ~biovar~, ~tlag~ may be either 
  + one-dimensional array src_stan[:exports code ]{real[]}
    for constants of all events, or
  + two-dimensional array src_stan[:exports code ]{real[ , ]}
    so that the \(i\)th row of the array describes
    the model arguments for time interval $(t_{i-1}, t_i)$,
    and the number of the rows euqals to the number of events.
- Setting $k_a = 0$ eliminates the first-order absorption.
- The function returns a two-dimensional array of size =nt=
  by =ncmt=, where =nt= is the number of time steps and
  =ncmt=2= is the number of compartments.

** Two Compartment Model
<<sec:twocpt>>
#+INDEX: Two Compartment Model
#+BEGIN_SRC stan
  matrix = pmx_solve_twocpt(real[] time, real[] amt, real[] rate,
                                 real[] ii, int[] evid, int[] cmt,
                                 real[] addl, int[] ss, real[] theta,
                                 real[] biovar, real[] tlag)
#+END_SRC

Torsten function =pmx_solve_twocpt= (see also Figure [[one_two_cpt_models]]) solves two-compartment PK
models. The model obtains plasma concentrations of parent drug $c=y_2/V_2$
by solving for $y_2$ and $y_3$, the mass of drug in the central and peripheral compartments,
respectively, from ODEs
\begin{subequations}
  \begin{align} \label{eq:twocpt}
    y_1' &= -k_a y_1 \\
    y_2' &= k_a y_1 - \left(\frac{CL}{V_2} + \frac{Q}{V_2}\right) y_2 +  \frac{Q}{V_3}  y_3  \\ 
    y_3' &= \frac{Q}{V_2} y_2 - \frac{Q}{V_3} y_3
  \end{align}
\end{subequations}

- ODE Parameters ~theta~ consists of $CL$, $Q$, $V_2$, $V_3$, $k_a$.
- The event arguments ~time~, ~amt~, ~rate~, ~ii~, ~evid~, ~cmt~, ~addl~, and
  ~ss~, describe the event schedule of the clinical
  trial. All arrays have the same length corresponding to the number of events.
- See section [[sec:onecpt]] regarding model arguments ~theta~, ~biovar~, and ~tlag~.
- Setting $ka$ to 0 eliminates the first-order absorption. 
- The function returns a two-dimensional array of size =nt=
  by =ncmt=, where =nt= is the number of time steps and
  =ncmt=3= is the number of compartments.

** General Linear ODE Model Function
#+INDEX: General linear model 
#+BEGIN_SRC stan
  matrix = pmx_solve_linode(real[] time, real[] amt, real[] rate,
                       real[] ii, int[] evid, int[] cmt,
                       real[] addl, int[] ss,
                       matrix K, real[] biovar, real[] tlag)
#+END_SRC
Torsten function =pmx_solve_linode= 
solves a (piecewise) linear ODEs model with coefficients
in form of matrix $K$
\begin{equation}
y^\prime\left(t\right) = Ky\left(t\right)
\end{equation}
For example, for a two-compartment
model with first order absorption, $K$ would be
\begin{equation}
  K = \left[\begin{array}{ccc}
              -k_a & 0 & 0 \\
              k_a & -\left(k_{10} + k_{12}\right) & k_{21} \\
              0 & k_{12} & -k_{21}
            \end{array}\right]
\end{equation}
where $k_{10}=CL/V_2$, $k_{12}=Q/V_2$, and $k_{21}=Q/V_3$.

- ~K~ contains system parameters. In the case of constant rate,
  =K= is the same for all events or an array of constant rate
  matrices. The length of the array is
  the number of events and the ~i~ th element corresponds to the matrix at
  the interval ~[time[i-1], time[i]]~.
  Note that ~K~ contains all the ODE parameters, so we no
  longer need ~theta~.
- See section [[sec:onecpt]] regarding model arguments ~theta~,
  ~biovar~, and ~tlag~.
- The function returns a two-dimensional array of size =nt=
  by =n=, where =nt= is the number of time steps and
  =n= is the size of the square matrix =K=.

** General ODE Model Function
#+INDEX: General ODE Model
#+BEGIN_SRC stan
  matrix pmx_solve_adams(ODE_system, int nCmt,
                             real[] time, real[] amt, real[] rate, real[] ii,
                             int[] evid, int[] cmt, real[] addl, int[] ss,
                             real[] theta, real[] biovar, real[] tlag,                      
                             real rel_tol, real abs_tol, int max_step);
#+END_SRC
#+BEGIN_SRC stan
  matrix pmx_solve_rk45(ODE_system, int nCmt,
                              real[] time, real[] amt, real[] rate, real[] ii,
                              int[] evid, int[] cmt, real[] addl, int[] ss,
                              real[] theta, real[] biovar, real[] tlag,                      
                              real rel_tol, real abs_tol, int max_step);
#+END_SRC
#+BEGIN_SRC stan
  matrix pmx_solve_bdf(ODE_system, int nCmt,
                             real[] time, real[] amt, real[] rate, real[] ii,
                             int[] evid, int[] cmt, real[] addl, int[] ss,
                             real[] theta, real[] biovar, real[] tlag,                      
                             real rel_tol, real abs_tol, int max_step);
#+END_SRC
Torsten function =pmx_solve_adams=, =pmx_solve_rk45= and
=pmx_solve_bdf= solve first ODEs with
user-specified first-order right-hand-side(RHS)
\begin{equation*}
y'(t) = f(t, y(t))
\end{equation*}
In the case where the =rate= vector $r$ is non-zero, this equation becomes:
\begin{equation*}
y'(t) = f(t, y(t)) + r
\end{equation*}

- User specifies $f(t, y(t))$ by defining =ODE_system=
  inside the ~functions~ block (see section 19.2 of the
  Stan reference manual for details and code below
  for an example). The user does NOT include the rates in their
  definition of $f$. Torsten automatically corrects the derivatives when
  the rates are non-zero.
- ~nCmt~ is the number of compartments (or, equivalently, the
  number of ODEs) in the model. 
- ~rel_tol~, ~abs_tol~,
  and ~max_step~ are tuning parameters for the ODE integrator:
  respectively the relative tolerance, the absolute tolerance, and the
  maximum number of steps.
- =pmx_solve_rk45= solves ODE with Stan's Runge-Kutta
  ODE solver function.
- =pmx_solve_adams= solves ODE with Torsten's Adams-Moulton ODE solver function =pmx_integrate_ode_adams=.
- =pmx_solve_bdf= solves ODE with Torsten's Backward
  Differentiation(BDF) ODE solver function =pmx_integrate_ode_bdf=, 
- The values to use for the tuning parameters depends on the integrator and
  the specifics of the ODE system. Reducing the tolerance parameters and
  increasing the number of steps make for a more robust integrator but
  can significantly slow down the algorithm. The following can be used
  as a starting point: 
  + ~rel_tol = 1e-6~
  + ~abs_tol = 1e-6~
  + ~max_step = 1e+6~
  for rk45 integrator and
  + ~rel_tol = 1e-10~
  + ~abs_tol = 1e-10~
  + ~max_step = 1e+8~
  for the BDF integrator [fn::These are the default tuning parameters the integrators. Torsten functions do not have a default values for these parameters. The user must explicitly pass the tuning parameters to ~generalOdeModel_*()~ .].
  Users should be prepared to adjust these
  values. For additional information, see the Stan User's
  Manual cite:stan_team_2017.
- In the case of a multiple truncated infusion rate dosing regimen
  The bioavailability ~biovar~ and the amount ~amt~ cannot be passed as parameters.
- See section [[sec:onecpt]] regarding model arguments ~theta~,
  ~biovar~, and ~tlag~.
# These restrictions also apply to ~mixOdeCpt_*~ functions, discussed in the next section.

** Coupled ODE Model Function
<<sec:mixed>>
#+INDEX: Mixed ODE Model

#+BEGIN_SRC stan
  matrix pmx_solve_onecpt_rk45(reduced_ODE_system, int nOde,
                              real[] time, real[] amt, real[] rate,
                              real[] ii, int[] evid, int[] cmt, real[]
                              addl, int[] ss,
                              real[] theta, real[] biovar, real[] tlag,
                              real rel_tol, real abs_tol, real max_step)
#+END_SRC
#+BEGIN_SRC stan
  matrix pmx_solve_onecpt_bdf(reduced_ODE_system, int nOde,
                              real[] time, real[] amt, real[] rate,
                              real[] ii, int[] evid, int[] cmt, real[]
                              addl, int[] ss,
                              real[] theta, real[] biovar, real[] tlag,
                              real rel_tol, real abs_tol, real max_step)
#+END_SRC
#+BEGIN_SRC stan
  matrix pmx_solve_twocpt_rk45(reduced_ODE_system, int nOde,
                              real[] time, real[] amt, real[] rate,
                              real[] ii, int[] evid, int[] cmt, real[]
                              addl, int[] ss,
                              real[] theta, real[] biovar, real[] tlag,
                              real rel_tol, real abs_tol, real max_step)
#+END_SRC
#+BEGIN_SRC stan
  matrix pmx_solve_twocpt_bdf(reduced_ODE_system, int nOde,
                              real[] time, real[] amt, real[] rate,
                              real[] ii, int[] evid, int[] cmt, real[]
                              addl, int[] ss,
                              real[] theta, real[] biovar, real[] tlag,
                              real rel_tol, real abs_tol, real max_step)
#+END_SRC
When the ODE system consists of two subsystems in form of
\begin{align*}
  y_1^\prime &= f_1(t, y_1), \\
  y_2^\prime &= f_2(t, y_1, y_2),
\end{align*}
with $y_1$, $y_2$, $f_1$, and $f_2$ being vector-valued functions, and
$y_1^\prime$ independent of $y_2$, the solution can be
accelerated if $y_1$ admits an analytical solution which can
be introduced into the ODE for $y_2$ for numerical
integration. This structure arises in PK/PD
models, where $y_1$ describes a forcing PK function and $y_2$ the PD
effects. In the example of a Friberg-Karlsson
semi-mechanistic model(see below), we observe an average speedup of
$\sim 47 \pm 18 \%$ when using the mix solver in lieu of the numerical
integrator. Torsten supports the mixed solver for
cases where $y_1$ solves the ODEs for a One or Two Compartment model
with a first-order absorption.

The ~reduced_ODE_system~ specifies the system we
numerically solve ($y_2$ in the above discussion, also called the
/reduced system/ and ~nOde~ the number of equations in
the \underline{reduced} system. The function that defines a reduced
system has an almost identical signature to that used for a full
system, but takes one additional argument: $y_1$, the PK states,
i.e. solution to the PK ODEs.
#+BEGIN_SRC stan
  real[] reducedODE(real t,       // time
                    real[] y,     // reduced state
                    real[] y1,    // PK states
                    real[] theta, // parameters
                    real[] x_r,   // data (real)
                    int[] x_int)  // data (integer)
#+END_SRC

The four functions of mixed solver correspond to all the permutations Torsten
provides when using a forcing One or Two Compartment function, and the
Runge-Kutta 4th/5th order (=rk45=) or Backward Differentiation (=bdf=)
integration scheme. The mixed ODE functions can be used to compute the
steady state solutions supported by the general ODE model functions.

Restrictions regarding which arguments may be passed as parameters for
general ODE solvers also apply to
mixed solvers.


** General ODE-based Population Model Function
#+INDEX: General ODE Model
#+BEGIN_SRC stan
  matrix pmx_solve_group_adams(ODE_system, int nCmt, int[] len,
                             real[] time, real[] amt, real[] rate, real[] ii,
                             int[] evid, int[] cmt, real[] addl, int[] ss,
                             real[] theta, real[] biovar, real[] tlag,                      
                             real rel_tol, real abs_tol, int max_step);
#+END_SRC
#+BEGIN_SRC stan
  matrix pmx_solve_group_rk45(ODE_system, int nCmt, int[] len,
                              real[] time, real[] amt, real[] rate, real[] ii,
                              int[] evid, int[] cmt, real[] addl, int[] ss,
                              real[] theta, real[] biovar, real[] tlag,                      
                              real rel_tol, real abs_tol, int max_step);
#+END_SRC
#+BEGIN_SRC stan
  matrix pmx_solve_group_bdf(ODE_system, int nCmt, int[] len,
                             real[] time, real[] amt, real[] rate, real[] ii,
                             int[] evid, int[] cmt, real[] addl, int[] ss,
                             real[] theta, real[] biovar, real[] tlag,                      
                             real rel_tol, real abs_tol, int max_step);
#+END_SRC
Similar to their single-subject counterparts, Torsten function =pmx_solve_group_adams=, =pmx_solve_group_rk45= and
=pmx_solve_group_bdf= solve a population ODE model. These
solvers support MPI parallelization.
- The ragged array arguments ~time~, ~amt~, ~rate~, ~ii~,
  ~evid~, ~cmt~, ~addl~, ~ss~ describe data record for the
  entire population.
- ~len~ specifies the length of data for each subject within
  the above ragged arrays, and the size of ~len~ is the size
  of the population.
- ~rel_tol~, ~abs_tol~,
  and ~max_step~ have same meaning and default values as in
  corresponding single-subject solvers.
- In ~cmdstan~, define ~TORSTEN_MPI=1~ in ~make/local~ to
  activate MPI solution for these population solvers.
- The solvers return a single matrix ragged column-wise. The
  number of rows equals to the number of compartments in the model.

** ODE  integrator Function
#+INDEX: PMX ODE integrators
#+BEGIN_SRC stan
  real[ , ] pmx_integrate_ode_adams(ODE_system, real[] y0, real t0, real[] ts,
                                    real[] theta, real[] x_r, int[] x_i,
                                    real rtol, real atol, int max_step);
#+END_SRC
#+BEGIN_SRC stan
  real[ , ] pmx_integrate_ode_bdf(ODE_system, real[] y0, real t0, real[] ts,
                                  real[] theta, real[] x_r, int[] x_i,
                                  real rtol, real atol, int max_step);
#+END_SRC
#+BEGIN_SRC stan
  real[ , ] pmx_integrate_ode_rk45(ODE_system, real[] y0, real t0, real[] ts,
                                   real[] theta, real[] x_r, int[] x_i,
                                   real rtol, real atol, int max_step);
#+END_SRC
Torsten's own implementation of ODE integrators. They have same
signature as those in Stan.
- ~ts~ can be parameters in Torsten's ODE integrators.

** ODE group  integrator Function
#+INDEX: PMX ODE group integrators
#+BEGIN_SRC stan
  matrix pmx_integrate_ode_group_adams(ODE_system, real[ , ] y0, real t0,
                                       int[] len, real[ , ] ts,
                                       real[ , ] theta, real[ , ] x_r, int[ , ] x_i,
                                       real rtol, real atol, int max_step);
#+END_SRC
#+BEGIN_SRC stan
  matrix pmx_integrate_ode_group_bdf(ODE_system, real[ , ] y0, real t0,
                                     int[] len, real[ , ] ts,
                                     real[ , ] theta, real[ , ] x_r, int[ , ] x_i,
                                     real rtol, real atol, int max_step);
#+END_SRC
#+BEGIN_SRC stan
  matrix pmx_integrate_ode_group_rk45(ODE_system, real[ , ] y0, real t0,
                                      int[] len, real[ , ] ts,
                                      real[ , ] theta, real[ , ] x_r, int[ , ] x_i,
                                      real rtol, real atol, int max_step);
#+END_SRC
Torsten provides group solvers for a population of subjects with different parameters/data but
governed by a same ODE. These solvers support MPI parallelization.
- The ragged array arguments ~y0~, ~ts~, ~theta~, ~x_r~, ~x_i~ describe data record for the
  entire ODE group.
- ~len~ specifies the length of data for each subject within
  the above ragged arrays, and the size of ~len~ is the size
  of the population.
- ~ts~ can only be data in the group integrators.
- The group integrators return a single matrix ragged
  column-wise. The number of rows equals to the size of ODE system.

** Univariate integral
#+INDEX: univariate integral
#+BEGIN_SRC stan
  real univariate_integral_rk45(f, t0, t1, theta, x_r, x_i)
#+END_SRC
#+BEGIN_SRC stan
  real univariate_integral_bdf(f, t0, t1, theta, x_r, x_i)
#+END_SRC
Based on the ODE solver capability in Stan, Torsten provides functions
calculating the integral of a univariate function. The integrand function $f$ must follow the signature
#+BEGIN_SRC stan
    real f(real t, real[] theta, real[] x_r, int[] x_i) {
      /* ... */
  }
#+END_SRC

** Piecewise linear interpolation
#+INDEX: linear interpolation
#+BEGIN_SRC stan
real linear_interpolation(real xout, real[] x, real[] y)
#+END_SRC
#+BEGIN_SRC stan
real[] linear_interpolation(real[] xout, real[] x, real[] y)
#+END_SRC
Torsten also provides function =linear_interpolation= for piecewise linear interpolation over a
set of x, y pairs. It returns the values of a piecewise linear
function at specified values =xout= of the first function argument. The
function is specified in terms of a set of x, y
pairs. Specifically, =linear_interpolation= implements the following function
\begin{align*}
  y_{\text{out}} = \left\{\begin{array}{ll}
                 y_1, & x_{\text{out}} < x_1 \\
                 y_i + \frac{y_{i+1} - y_i}{x_{i+1} - x_i}
                 \left(x_{\text{out}} - x_i\right), & x_{\text{out}} \in [x_i, x_{i+1}) \\
                 y_n, & x_{\text{out}} \ge x_n 
                          \end{array}\right.
\end{align*}
- The x values must be in increasing order, i.e. $x_i < x_{i+1}$.
- All three arguments may be data or parameters.

* Examples
** Two-compartment model for single patient 
  We model drug absorption in a single patient and simulate plasma drug concentrations:

  - Multiple Doses: 1250 mg, every 12 hours, for a total of 15 doses
  - PK measured at 0.083, 0.167, 0.25, 0.5, 0.75, 1, 1.5, 2, 4, 6,
    8, 10 and 12 hours after 1st, 2nd, and 15th dose. In addition, the
    PK is measured every 12 hours throughout the trial.

  With the plasma concentration $\hat{c}$ solved from
  two-compartment ODEs in [[sec:twocpt]], we simulate $c$ according to:
  \begin{align*}
    \log\left(c\right) &\sim N\left(\log\left(\widehat{c}\right),\sigma^2\right) \\
    \left(CL, Q, V_2, V_3, ka\right) &= \left(5\ {\rm L/h}, 8\  {\rm L/h}, 20\  {\rm L},  70\ {\rm L}, 1.2\ {\rm h^{-1}} \right) \\
    \sigma^2 &= 0.01
  \end{align*}
  The data are generated using the R package =mrgsolve= cite:Baron000.

Code below shows how Torsten function ~pmx_solve_twocpt~ can be used to fit the above model.

#+include: "../example-models/pk2cpt/pk2cpt.stan" :lines "5-74" src stan

#+BEGIN_SRC R :results output silent :exports none
  setwd("~/Work/Torsten_debug/example-models/R")
  source("TwoCpt.R")                      #
#+END_SRC

Three MCMC chains of 2000 iterations are simulated. The first
1000 iteration of each chain were discarded. Thus 1000 MCMC samples
per chain were used for the subsequent analyses.
The MCMC history plots(Figure [[twocpt_mcmc_history]])
suggest that the 3 chains have converged to common distributions for
all of the key model parameters. The fit to the plasma concentration
data (Figure [[twocpt_mcmc_predict]]) are in close agreement with the
data, which is not surprising since the fitted model is identical to
the one used to simulate the data. Similarly the parameter estimates
summarized in Table [[tab:twocpt_summary]] and Figure [[twocpt_mcmc_posterior]]
are consistent with the values used for simulation.

#+CAPTION: Summary of the MCMC simulations of the marginal posterior distribu- tions of the model parameters
#+NAME: tab:twocpt_summary
|-------+--------+---------+-------+--------+--------+--------+--------+--------+----------+------|
|       |   mean | se_mean |    sd |   2.5% |    25% |    50% |    75% |  97.5% |    n_eff | Rhat |
|-------+--------+---------+-------+--------+--------+--------+--------+--------+----------+------|
| CL    |  4.823 |   0.002 | 0.092 |  4.647 |  4.762 |  4.823 |  4.883 |  5.012 | 2392.155 | 1.00 |
| Q     |  7.596 |   0.013 | 0.586 |  6.479 |  7.201 |  7.594 |  7.977 |  8.785 | 1923.939 | 1.00 |
| V1    | 21.073 |   0.069 | 2.573 | 16.017 | 19.352 | 21.046 | 22.817 | 26.097 | 1385.883 | 1.00 |
| V2    | 76.365 |   0.105 | 5.611 | 65.805 | 72.623 | 76.172 | 79.916 | 87.971 | 2862.184 | 1.00 |
| ka    |  1.231 |   0.004 | 0.177 |  0.907 |  1.107 |  1.221 |  1.344 |  1.599 | 1581.825 | 1.00 |
| sigma |  0.109 |   0.000 | 0.012 |  0.089 |  0.100 |  0.108 |  0.116 |  0.134 | 2560.112 | 1.00 |
|-------+--------+---------+-------+--------+--------+--------+--------+--------+----------+------|
#+TBLFM: $2=$0;%0.3f::$3=$0;%0.3f::$4=$0;%0.3f::$5=$0;%0.3f::$6=$0;%0.3f::$7=$0;%0.3f::$8=$0;%0.3f::$9=$0;%0.3f::$10=$0;%0.3f::$11=$0;%0.3f

#+CAPTION: MCMC history plots for the parameters of a two compartment model with first order absorption (each color corresponds to a different chain)
#+NAME: twocpt_mcmc_history
#+ATTR_LATEX: :width 0.6\linewidth
[[../example-models/R/deliv/figure/TwoCptModel/TwoCptModelPlots001.pdf]]

#+CAPTION: MCMC history plots for the parameters of a two compartment model with first order absorption (each color corresponds to a different chain)
#+NAME: twocpt_mcmc_history
#+ATTR_LATEX: :width 0.6\linewidth
[[../example-models/R/deliv/figure/TwoCptModel/TwoCptModelPlots002.pdf]]

#+CAPTION: Posterior Marginal Densities of the Model Parameters of a two compartment model with first order absorption (each color corresponds to a different chain)
#+NAME: twocpt_mcmc_posterior
#+ATTR_LATEX: :width 0.6\linewidth
[[../example-models/R/deliv/figure/TwoCptModel/TwoCptModelPlots003.pdf]]

#+CAPTION: Predicted (posterior median and 90% credible intervals) and observed plasma drug concentrations of a two compartment model with first order absorption
#+NAME: twocpt_mcmc_predict
#+ATTR_LATEX: :width 0.5\linewidth
[[../example-models/R/deliv/figure/TwoCptModel/TwoCptModelPlots006.pdf]]

** Two-compartment model as a linear ODE model for single patient 
Using =pmx_solve_linode=, the following example fits a two-compartment model
with first order absorption.

#+include: "../example-models/LinTwoCptModel/LinTwoCptModel.stan" :lines "1-68" src stan

** Two-compartment model solved by numerical integrator for single patient 
Using =pmx_solve_rk45=, the following example fits a two-compartment model
with first order absorption. User-defined function
=twoCptModelODE= describes the RHS of the ODEs.

#+include: "../example-models/GenTwoCptModel/GenTwoCptModel.stan" :lines "1-115" src stan

** Joint PK-PD model
#+INDEX: Friberg-Karlsson Model

   A Friberg-Karlsson Semi-Mechanistic model cite:friberg_mechanistic_2003 couples
   a PK model with a PD
   effect. In the current example, we use the two compartment model in section [[sec:twocpt]] for
   PK model.

   Neutropenia is observed in patients receiving an ME-2 drug. Our goal
   is to model the relation between neutrophil counts and drug
   exposure. Using a feedback mechanism, the body maintains the number of
   neutrophils at a baseline value (Figure [[FK_model]]). While in the
   patient's blood, the drug impedes the production of neutrophils. As a
   result, the neutrophil count goes down. After the drug clears out, the
   feedback mechanism kicks in and brings the neutrophil count back to
   baseline.

  \begin{align}
    \log(ANC_i) \sim& N(\log(Circ), \sigma^2_{ANC})  \\
    Circ =& f_{FK}(MTT, Circ_{0}, \alpha, \gamma, c)  \\
    (MTT, Circ_{0}, \alpha, \gamma, ktr) =& (125, 5.0, 3 \times 10^{-4}, 0.17) \\
    \sigma^2_{ANC} =& 0.001
  \end{align}
  where $c$ is the drug concentration in the blood we get from the Two
  Compartment model, and $Circ$ is obtained by solving the following
  system of nonlinear ODEs:
\begin{subequations}
  \begin{align}
   y_\mathrm{prol}' &= k_\mathrm{prol} y_\mathrm{prol} (1 - E_\mathrm{drug})\left(\frac{Circ_0}{y_\mathrm{circ}}\right)^\gamma - k_\mathrm{tr}y_\mathrm{prol} \\
   y_\mathrm{trans1}' &= k_\mathrm{tr} y_\mathrm{prol} - k_\mathrm{tr} y_\mathrm{trans1} \\
   y_\mathrm{trans2}' &= k_\mathrm{tr} y_\mathrm{trans1} - k_\mathrm{tr} y_\mathrm{trans2}  \\
   y_\mathrm{trans3}' &= k_\mathrm{tr} y_\mathrm{trans2} - k_\mathrm{tr} y_\mathrm{trans3}  \\
   y_\mathrm{circ}' &= k_\mathrm{tr} y_\mathrm{trans3} - k_\mathrm{tr} y_\mathrm{circ}
   \end{align}
   \label{eq:FK}
\end{subequations}
where $E_{drug}  = \alpha c$.

The ODEs specifying the Two Compartment Model
(Equation \eqref{eq:twocpt}) do not depend on the PD ODEs
(Equation \eqref{eq:FK}) and can be solved analytically
using Torsten's src_stan[:exports code]{pmx_solve_twocpt} function. We
therefore specify our model using a mixed solver function. We do not
expect our system to be stiff and use the Runge-Kutta 4th/5th order
integrator.

#+CAPTION: Friberg-Karlsson semi-mechanistic Model.
#+NAME: FK_model
#+ATTR_LATEX: :width 0.8\textwidth
[[file:./graphics/neutrophilModel.jpg]]

#+include: "../tests/FribergKarlsson/FribergKarlsson.stan" src stan


** Two-compartment population model
Using =pmx_solve_group_bdf=, the following example fits a
two-compartment population model.

#+include: "../example-models/twocpt_population/twocpt_population.stan" :lines "1-145" src stan

** Lotka-Volterra group model
Using =pmx_integrate_ode_group_rk45=, the following example fits
a Lotka-Volterra group model, based on [[https://mc-stan.org/users/documentation/case-studies/lotka-volterra-predator-prey.html][Stan's case study]].

#+include: "../example-models/lotka_volterra_ode_group_model/lv_group.stan" :lines "1-57" src stan

** Univariate integral of a quadratic function
integral of a quadratic function.
This example shows how to use =univariate_integral_rk45= to calculate the
integral of a quadratic function.
#+BEGIN_SRC stan
  functions {
    real fun_ord2(real t, real[] theta, real[] x_r, int[] x_i) {
      real a = 2.3;
      real b = 2.0;
      real c = 1.5;
      real res;
      res = a + b * t + c * t * t;
      return res;
    }
  }
  data {
    real t0;
    real t1;
    real dtheta[2];
    real x_r[0];
    int x_i[0];
  }
  transformed data {
    real univar_integral;
    univar_integral = univariate_integral_rk45(func, t0, t1, dtheta, 
                            x_r, x_i);
  }
  /* ... */
#+END_SRC

** Linear intepolation
This example illustrates how to use =linear_intepolationi=
to fit a piecewise linear function to a data set consisting
of $(x, y)$ pairs.
#+BEGIN_SRC stan
data{
  int nObs;
  real xObs[nObs];
  real yObs[nObs];
  int nx;
  int nPred;
  real xPred[nPred];
}

transformed data{
  real xmin = min(xObs);
  real xmax = max(xObs);
}

parameters{
  real y[nx];
  real<lower = 0> sigma;
  simplex[nx - 1] xSimplex;
}

transformed parameters{
  real yHat[nObs];
  real x[nx];

  x[1] = xmin;
  x[nx] = xmax;
  for(i in 2:(nx-1))
    x[i] = x[i-1] + xSimplex[i-1] * (xmax - xmin);

  yHat = linear_interpolation(xObs, x, y);
}

model{
  xSimplex ~ dirichlet(rep_vector(1, nx - 1));
  y ~ normal(0, 25);
  yObs ~ normal(yHat, sigma);
}

generated quantities{
  real yHatPred[nPred];
  real yPred[nPred];

  yHatPred = linear_interpolation(xPred, x, y);
  for(i in 1:nPred)
    yPred[i] = normal_rng(yHatPred[i], sigma);
}
#+END_SRC

** Effect Compartment Population Model
Here we expand the example in [[sec:twocpt]] to a population model fitted to the
combined data from phase I and phase IIa studies. The
parameters exhibit inter-individual variations (IIV), due to
both random effects and to the patients' body weight,
treated as a covariate and denoted $bw$.
*** Population Model for Plasma Drug Concentration $c$
\begin{gather*}
  \log\left(c_{ij}\right) \sim N\left(\log\left(\widehat{c}_{ij}\right),\sigma^2\right), \\
  \widehat{c}_{ij} = f_{2cpt}\left(t_{ij},D_j,\tau_j,CL_j,Q_j,V_{1j},V_{2j},k_{aj}\right), \\
  \log\left(CL_j,Q_j,V_{ssj},k_{aj}\right) \sim N\left(\log\left(\widehat{CL}\left(\frac{bw_j}{70}\right)^{0.75},\widehat{Q}\left(\frac{bw_j}{70}\right)^{0.75}, \widehat{V}_{ss}\left(\frac{bw_j}{70}\right),\widehat{k}_a\right),\Omega\right), \\
  V_{1j} = f_{V_1}V_{ssj}, \\
  V_{2j} = \left(1 - f_{V_1}\right)V_{ssj}, \\
  \left(\widehat{CL},\widehat{Q},\widehat{V}_{ss},\widehat{k}_a, f_{V_1}\right) = \left(10\ {\rm L/h},15\  {\rm L/h},140\  {\rm L},2\ {\rm h^{-1}}, 0.25 \right), \\
  \Omega = \left(\begin{array}{cccc} 0.25^2 & 0 & 0 & 0 \\ 0 & 0.25^2 & 0 & 0 \\
                    0 & 0 & 0.25^2 & 0 \\ 0 & 0 & 0 & 0.25^2  \end{array}\right), \\
  \sigma = 0.1
\end{gather*}

Furthermore we add a fourth compartment in which we measure
a PD effect(Figure [[eff_model]]).

#+CAPTION: Effect Compartment Model
#+NAME: eff_model
#+ATTR_LATEX: :width 0.5\textwidth
[[file:./graphics/effCptModel.png]]

*** Effect Compartment Model for PD response $R$.
\begin{gather*}
R_{ij} \sim N\left(\widehat{R}_{ij},\sigma_{R}^2\right), \\
\widehat{R}_{ij} = \frac{E_{max}c_{eij}}{EC_{50j} + c_{eij}}, \\
c_{e\cdot j}^\prime = k_{e0j}\left(c_{\cdot j} - c_{e\cdot j}\right), \\
\log\left(EC_{50j}, k_{e0j}\right) \sim N\left(\log\left(\widehat{EC}_{50}, \widehat{k}_{e0}\right),\Omega_R\right), \\
\left(E_{max}, \widehat{EC}_{50},\widehat{k}_{e0}\right) = \left(100, 100.7, 1\right), \\
\Omega_R = \left(\begin{array}{cc} 0.2^2 & 0 \\ 0 & 0.25^2  \end{array}\right), \ \ \ \sigma_R = 10.
\end{gather*}

The PK and the PD data are simulated using the following
treatment.
- Phase I study
  + Single dose and multiple doses
  + Parallel dose escalation design
  + 25 subjects per dose
  + Single doses: 1.25, 5, 10, 20, and 40 mg 
  + PK: plasma concentration of parent drug ($c$)
  + PD response: Emax function of effect compartment concentration ($R$)
  + PK and PD measured at 0.083, 0.167, 0.25, 0.5, 0.75, 1, 2, 3, 4, 6, 8, 12, 18, and 24 hours
- Phase IIa trial in patients
  + 100 subjects
  + Multiple doses: 20 mg
  + sparse PK and PD data (3-6 samples per patient)

The model is simultaneously fitted to the PK and the PD
data. For this effect compartment model, we construct a
constant rate matrix and use =pmx_solve_linode=. Correct use of
Torsten requires the user pass the entire event history
(observation and dosing events) for an individual to the
function. Thus the Stan model shows the call to =pmx_solve_linode=
within a loop over the individual subjects rather than over
the individual observations.

#+include: "../example-models/effCpt/effCpt.stan" :lines "54-127" src stan

*** Results
We use the same diagnosis tools as for the
previous examples. The MCMC history plots (Figure \ref{effCptModelMCMC}) suggest the 4 chains have converged to common
distributions. We note some minor auto-correlations for $lp\_$ (the
log posterior) and for IIV parameters: specifically $\Omega_{ke_0}$
and $\rho$. The correlation matrix $\rho$ does not explicitly appear
in the model, but it is used to construct $\Omega$, which parametrizes
the PK IIV. 
The fits to the plasma concentration
(Figure \ref{effCptModelPredictionsPK}) are in close agreement with
the data, notably for the sparse data case (phase IIa study). The fits
to the PD data (Figure \ref{effCptModelPredictionsPD}) look good,
though the data is more noisy. The model reflects the noise by
producing larger credible intervals. The estimated values of the
parameters are consistent with the values used to simulate the data
(Table [[effCptModelParms]]) and Figure \ref{effCptModelDens}).

#+CAPTION: Summary of the MCMC simulations of the marginal posterior distributions of the model parameters for the effect compartment model example.
#+ATTR_LATEX: :font \footnotesize :align  r r r r r r r r r r r
#+LABEL: effCptModelParms
#+NAME: effCptModelParms
|           |     mean | se\under{}mean |     sd |     2.5% |      25% |      50% |      75% |   97.5% | n\under{}eff |  Rhat |
|-----------+----------+----------------+--------+----------+----------+----------+----------+---------+--------------+-------|
| lp__      | -201.282 |         10.073 | 84.189 | -333.764 | -259.017 | -213.416 | -154.381 |   8.549 |       69.850 | 1.044 |
| CLHat     |   10.095 |          0.003 |  0.201 |    9.712 |    9.958 |   10.096 |   10.231 |  10.483 |     4000.000 | 0.999 |
| QHat      |   14.867 |          0.014 |  0.357 |   14.182 |   14.620 |   14.862 |   15.106 |  15.563 |      678.208 | 1.007 |
| V1Hat     |   34.188 |          0.067 |  1.089 |   31.940 |   33.494 |   34.214 |   34.918 |  36.251 |      267.748 | 1.016 |
| V2Hat     |  103.562 |          0.076 |  2.925 |   98.031 |  101.600 |  103.454 |  105.472 | 109.583 |     1488.296 | 1.001 |
| kaHat     |    1.930 |          0.004 |  0.077 |    1.771 |    1.880 |    1.933 |    1.982 |   2.076 |      334.888 | 1.014 |
| ke0Hat    |    1.050 |          0.001 |  0.044 |    0.967 |    1.020 |    1.051 |    1.078 |   1.137 |     1164.741 | 1.000 |
| EC50Hat   |  104.337 |          0.040 |  2.100 |  100.169 |  102.909 |  104.345 |  105.768 | 108.351 |     2744.041 | 1.000 |
| sigma     |    0.099 |          0.000 |  0.002 |    0.095 |    0.097 |    0.099 |    0.100 |   0.103 |     1906.342 | 1.002 |
| sigmaResp |   10.156 |          0.003 |  0.197 |    9.779 |   10.023 |   10.154 |   10.286 |  10.552 |     4000.000 | 1.000 |
| omega[1]  |    0.270 |          0.000 |  0.016 |    0.241 |    0.259 |    0.269 |    0.280 |   0.302 |     4000.000 | 1.001 |
| omega[2]  |    0.231 |          0.001 |  0.021 |    0.192 |    0.217 |    0.230 |    0.245 |   0.275 |      531.512 | 1.006 |
| omega[3]  |    0.219 |          0.002 |  0.031 |    0.158 |    0.199 |    0.218 |    0.238 |   0.281 |      158.198 | 1.017 |
| omega[4]  |    0.267 |          0.001 |  0.026 |    0.218 |    0.249 |    0.266 |    0.284 |   0.319 |      684.870 | 1.001 |
| omega[5]  |    0.285 |          0.002 |  0.037 |    0.214 |    0.259 |    0.284 |    0.309 |   0.361 |      284.545 | 1.009 |
| omegaKe0  |    0.271 |          0.003 |  0.047 |    0.183 |    0.239 |    0.271 |    0.303 |   0.363 |      217.350 | 1.007 |
| omegaEC50 |    0.213 |          0.001 |  0.021 |    0.174 |    0.199 |    0.213 |    0.227 |   0.255 |     1190.193 | 1.000 |
| rho[1,2]  |    0.194 |          0.003 |  0.100 |   -0.011 |    0.127 |    0.195 |    0.265 |   0.379 |     1000.772 | 1.004 |
| rho[1,3]  |   -0.157 |          0.005 |  0.126 |   -0.395 |   -0.243 |   -0.157 |   -0.072 |   0.088 |      677.709 | 1.001 |
| rho[2,3]  |    0.079 |          0.012 |  0.155 |   -0.227 |   -0.024 |    0.082 |    0.181 |   0.384 |      180.306 | 1.021 |
| rho[1,4]  |   -0.107 |          0.003 |  0.112 |   -0.319 |   -0.183 |   -0.110 |   -0.032 |   0.118 |     1081.932 | 1.002 |
| rho[2,4]  |    0.194 |          0.005 |  0.126 |   -0.062 |    0.110 |    0.199 |    0.282 |   0.428 |      623.035 | 1.007 |
| rho[3,4]  |    0.796 |          0.008 |  0.094 |    0.592 |    0.737 |    0.808 |    0.867 |   0.940 |      152.112 | 1.033 |
| rho[1,5]  |    0.023 |          0.006 |  0.135 |   -0.232 |   -0.068 |    0.024 |    0.115 |   0.285 |      564.687 | 1.003 |
| rho[2,5]  |    0.119 |          0.011 |  0.160 |   -0.188 |    0.008 |    0.118 |    0.224 |   0.438 |      226.174 | 1.014 |
| rho[3,5]  |   -0.246 |          0.018 |  0.202 |   -0.663 |   -0.382 |   -0.237 |   -0.105 |   0.133 |      119.465 | 1.021 |
| rho[4,5]  |   -0.288 |          0.009 |  0.155 |   -0.576 |   -0.396 |   -0.291 |   -0.183 |   0.014 |      275.549 | 1.009 |

\begin{figure}[!htb]
  \includegraphics[width=3.0in,trim=0in 0in 0 0in]{graphics/effCptModelTorsten_0.82/effCptPlots001.pdf}
  \includegraphics[width=3.0in,trim=0in 0in 0 0in]{graphics/effCptModelTorsten_0.82/effCptPlots002.pdf}
  \includegraphics[width=3.0in,trim=0in 0in 0 0in]{graphics/effCptModelTorsten_0.82/effCptPlots003.pdf}
  \includegraphics[width=3.0in,trim=0in 0in 0 0in]{graphics/effCptModelTorsten_0.82/effCptPlots004.pdf}
  \includegraphics[width=3.0in,trim=0in 0in 0 0in]{graphics/effCptModelTorsten_0.82/effCptPlots005.pdf}
  \caption{{MCMC history plots for the parameters of an Effect Compartment Model (each color corresponds to a different chain) for example 2}}
  \label{effCptModelMCMC}
\end{figure}

\begin{figure}[!htb]
  \includegraphics[width=3.0in,trim=0in 0in 0 0in]{graphics/effCptModelTorsten_0.82/effCptPlots006.pdf}
  \includegraphics[width=3.0in,trim=0in 0in 0 0in]{graphics/effCptModelTorsten_0.82/effCptPlots007.pdf}
  \caption{{Posterior Marginal Densities of the Model Parameters of an Effect Compartment Model (each color corresponds to a different chain) for example 2}}
  \label{effCptModelDens}
\end{figure}

\begin{figure}[!htb]
  \includegraphics[width=1.5in,trim=0in 0in 0 0in]{graphics/effCptModelTorsten_0.82/effCptPlots011.pdf}
  \includegraphics[width=1.5in,trim=0in 0in 0 0in]{graphics/effCptModelTorsten_0.82/effCptPlots012.pdf}
  \includegraphics[width=1.5in,trim=0in 0in 0 0in]{graphics/effCptModelTorsten_0.82/effCptPlots013.pdf}
  \includegraphics[width=1.5in,trim=0in 0in 0 0in]{graphics/effCptModelTorsten_0.82/effCptPlots014.pdf}
  \includegraphics[width=1.5in,trim=0in 0in 0 0in]{graphics/effCptModelTorsten_0.82/effCptPlots019.pdf}
  \includegraphics[width=1.5in,trim=0in 0in 0 0in]{graphics/effCptModelTorsten_0.82/effCptPlots020.pdf}
  \includegraphics[width=1.5in,trim=0in 0in 0 0in]{graphics/effCptModelTorsten_0.82/effCptPlots021.pdf}
  \includegraphics[width=1.5in,trim=0in 0in 0 0in]{graphics/effCptModelTorsten_0.82/effCptPlots022.pdf}
  \caption{{Predicted (posterior median and 90 \% credible intervals) and observed plasma drug concentrations for example 2 for an Effect Compartment Model}}
  \label{effCptModelPredictionsPK}
\end{figure}

\begin{figure}[!htb]
\includegraphics[width=1.5in,trim=0in 0in 0 0in]{graphics/effCptModelTorsten_0.82/effCptPlots023.pdf}
\includegraphics[width=1.5in,trim=0in 0in 0 0in]{graphics/effCptModelTorsten_0.82/effCptPlots024.pdf}
\includegraphics[width=1.5in,trim=0in 0in 0 0in]{graphics/effCptModelTorsten_0.82/effCptPlots025.pdf}
\includegraphics[width=1.5in,trim=0in 0in 0 0in]{graphics/effCptModelTorsten_0.82/effCptPlots026.pdf}
\includegraphics[width=1.5in,trim=0in 0in 0 0in]{graphics/effCptModelTorsten_0.82/effCptPlots027.pdf}
\includegraphics[width=1.5in,trim=0in 0in 0 0in]{graphics/effCptModelTorsten_0.82/effCptPlots028.pdf}
\includegraphics[width=1.5in,trim=0in 0in 0 0in]{graphics/effCptModelTorsten_0.82/effCptPlots029.pdf}
\includegraphics[width=1.5in,trim=0in 0in 0 0in]{graphics/effCptModelTorsten_0.82/effCptPlots030.pdf}
\caption{{Predicted (posterior median and 90 \% credible intervals) and observed PD Response for example 2}}
\label{effCptModelPredictionsPD}
\end{figure}

** Friberg-Karlsson Semi-Mechanistic Population Model
We now return to the example in Section [[sec:mixed]] and extend
it to a population model. While we recommend using the mixed
solver, for completeness we show how to specify the model
with the =generalOdeModel= function. We leave it
as an exercise to the reader to rewrite the model with
=mixOde2CptModel=. 

*** Friberg-Karlsson Population Model for drug-induced myelosuppression ($ANC$)
\begin{gather*}
\log(ANC_{ij}) \sim N(Circ_{ij}, \sigma^2_{ANC}), \\
\log\left(MTT_j, Circ_{0j}, \alpha_j\right) \sim N\left(\log\left(\widehat{MTT}, \widehat{Circ_0}, \widehat{\alpha}\right), \Omega_{ANC}\right), \\
\left(\widehat{MTT}, \widehat{Circ}_0,\widehat{\alpha}, \gamma \right) = \left(125, 5, 2, 0.17\right), \\
\Omega_{ANC} = \left(\begin{array}{ccc} 0.2^2 & 0 & 0 \\ 0 & 0.35^2 & 0 \\ 0 & 0 & 0.2^2 \end{array}\right), \\
\sigma_{ANC} = 0.1, \\
\Omega_{PK} = \left(\begin{array}{ccccc} 0.25^2 & 0 &a 0 & 0 & 0 \\ 0 & 0.4^2 & 0 & 0 & 0 \\
0 & 0 & 0.25^2 & 0 & 0 \\ 0 & 0 & 0 & 0.4^2 & 0 \\ 0 & 0 & 0 & 0 & 0.25^2  \end{array}\right)
\end{gather*}
The PK and the PD data are simulated using the following treatment.
- Phase IIa trial in patients
   + Multiple doses: 80,000 mg
   + Parallel dose escalation design
   + 15 subjects
   + PK: plasma concentration of parent drug ($c$)
   + PD response: Neutrophil count ($ANC$)
   + PK measured at 0.083, 0.167, 0.25, 0.5, 0.75, 1, 2, 3, 4, 6, 8, 12, 18, and 24 hours
   + PD measured once every two days for 28 days.

Once again, we simultaneously fit the model to the PK and the PD
data. Note that from a computational perspective, this is a much more
difficult problem than in the previous
example. The nonlinear nature of the ODEs forces us to use a numerical
solver, which is significantly slower than the linear methods we have
employed so far. Because the ODE system of interest is non-stiff, we
use the =genOdeModel_rk45=, 

The two code snippets below show the definition of the ODEs
system and the skeleton of the solution process in Stan's
=transformed parameters= block.
#+include: "../example-models/neutropeniaPopulation/neutropeniaPopulation.stan" :lines "1-54" src stan

#+include: "../example-models/neutropeniaPopulation/neutropeniaPopulation.stan" :lines "134-190" src stan

It pays off to construct informative priors. For instance, we could
fit the PK data first, as was done in  example 1, and get informative
priors on the PK parameters. The PD parameters are drug independent,
so we can use information from the neutropenia literature. In this
example, we choose to use weakly informative priors on the PK
parameters and strongly informative priors on the PD parameters. 

Since it takes a long time to run the model, we only use 100
iterations per chain, and study what we can learn from this less than
optimal scenario. It is worth noting that Stan, because of its highly
efficient MCMC sampler, still does a reasonable job estimating the
posterior distribution.

*** Results
The MCMC history plots are not as convincing
as in the previous examples, mostly because the number of iterations
is small (100 versus 1000 in the previous example) (Figure \ref{FKMCMC}. It does however look as though the chains are converging
to a common distribution, and we see little auto-correlation (in
particular, we expect that if we had run the model for 1000
iterations, we would obtain the desired "fuzzy caterpillar"
look). The model fits the data, and the credible interval reflect the
noise in the data (Figure \ref{FKPredictions}). The parameters
estimation reflects the real value of the parameters (Table [[FKParms]] and Figure \ref{FKDens}).

#+CAPTION: Summary of the MCMC simulations of the marginal posterior distributions of the model parameters for the Friberg-Karlsson model example.
#+ATTR_LATEX: :font \footnotesize :align  r r r r r r r r r r r
#+LABEL: FKParms
#+NAME: FKParms
|           |    mean | se\under{}mean |      sd |    2.5% |     25% |     50% |     75% |   97.5% | n\under{}eff |  Rhat |
|-----------+---------+----------------+---------+---------+---------+---------+---------+---------+--------------+-------|
| CL        |   9.986 |          0.009 |   0.174 |   9.641 |   9.872 |   9.982 |  10.107 |  10.331 |      400.000 | 0.997 |
| Q         |  14.633 |          0.055 |   1.106 |  12.505 |  13.992 |  14.623 |  15.296 |  16.948 |      400.000 | 0.996 |
| V1        |  32.909 |          0.174 |   2.439 |  28.203 |  31.186 |  32.836 |  34.762 |  37.750 |      195.828 | 1.008 |
| V2        | 106.631 |          0.311 |   6.226 |  95.234 | 102.269 | 106.403 | 111.000 | 118.533 |      400.000 | 0.999 |
| ka        |   1.882 |          0.012 |   0.175 |   1.582 |   1.756 |   1.871 |   2.006 |   2.223 |      196.052 | 1.007 |
| sigma     |   0.106 |          0.001 |   0.010 |   0.089 |   0.098 |   0.105 |   0.112 |   0.132 |      259.693 | 1.009 |
| alpha     | 3.3e-04 |        1.4e-06 | 2.2e-05 | 2.9e-04 | 3.2e-04 | 3.3e-04 | 3.5e-04 | 3.8e-04 |          247 |  1.01 |
| mtt       | 132.763 |          0.515 |   6.498 | 120.843 | 128.082 | 132.223 | 136.694 | 146.845 |      159.372 | 1.024 |
| circ0     |   5.014 |          0.009 |   0.172 |   4.711 |   4.888 |   5.000 |   5.138 |   5.334 |      400.000 | 1.000 |
| gamma     |   0.190 |          0.002 |   0.022 |   0.153 |   0.175 |   0.187 |   0.202 |   0.239 |      139.485 | 1.025 |
| sigmaNeut |   0.092 |          0.001 |   0.014 |   0.068 |   0.082 |   0.090 |   0.100 |   0.125 |      161.199 | 1.010 |

\begin{figure}[htbp]
\includegraphics[width=3.0in,trim=0in 0in 0 0in]{graphics/neutropenia_0.82/neutropeniaPopulationPlots001.pdf}
\includegraphics[width=3.0in,trim=0in 0in 0 0in]{graphics/neutropenia_0.82/neutropeniaPopulationPlots002.pdf}
\includegraphics[width=3.0in,trim=0in 0in 0 0in]{graphics/neutropenia_0.82/neutropeniaPopulationPlots003.pdf}
\includegraphics[width=3.0in,trim=0in 0in 0 0in]{graphics/neutropenia_0.82/neutropeniaPopulationPlots004.pdf}
\caption{{MCMC history plots for the parameters of a Friberg-Karlsson semi-mechanistic model (each color corresponds to a different chain) for example 3}}
\label{FKMCMC}
\end{figure}

\begin{figure}[htbp]
\includegraphics[width=2.5in,trim=0in 0in 0 0in]{graphics/neutropenia_0.82/neutropeniaPopulationPlots005.pdf}
\includegraphics[width=2.5in,trim=0in 0in 0 0in]{graphics/neutropenia_0.82/neutropeniaPopulationPlots006.pdf}
\caption{{Posterior Marginal Densities of the Model Parameters of a Friberg-Karlsson semi-mechanistic model (each color corresponds to a different chain)}}
\label{FKDens}
\end{figure}

\begin{figure}[htbp]
\includegraphics[width=2.5in,trim=0in 0in 0 0in]{graphics/neutropenia_0.82/neutropeniaPopulationPlots010.pdf}
\includegraphics[width=2.5in,trim=0in 0in 0 0in]{graphics/neutropenia_0.82/neutropeniaPopulationPlots011.pdf}
\caption{{Predicted (posterior median and 90 \% credible intervals) and observed plasma drug concentrations, and Neutrophil counts, for a Friberg-Karlsson semi-mechanistic model}}
\label{FKPredictions}
\end{figure}

\appendix
\printindex
\backmatter

\bibliography{torsten}
bibliographystyle:plain
